This is METAFONT, Version 2.71828 (Web2C 7.5.6) (base=mf 2012.2.16)  29 FEB 2012 09:23
**\mode:=ljfour; mag:=1; nonstopmode; input bbold11
(/home/kunzejo/.texlive2007/texmf-var/fonts/source/public/bbold/bbold11.mf
(/usr/share/texmf/fonts/source/public/bbold/bbold.mf
(/usr/share/texmf/fonts/source/public/bbold/bbparams.mf
>> asc_height#-x_height#-0.30714bigcap#
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(asc_height#)> if(EXPR0)<u_:
                                u_:=(EXPR0);fi ENDFOR
min->...);for.uu=(TEXT3):if.uu<u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.117 ...height# + space# + fatness#, asc_height#)
                                                  ;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> math_spread
>> 0.25x_height#
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   ]
l.163 ... math_spread [5/4x_height#, 3/2x_height#]
                                                  ; % Numbers from cmr.
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> 36o#+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   +
<for(o)> ...=vround((SUFFIX0)#*hppp*o_correction)+
                                                  eps; ENDFOR
define_corrected_pixels->...correction)+eps;endfor
                                                  
l.168 define_corrected_pixels (o)
                                 ;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> 36rule_thickness#+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
<for(pen_size)> ...round((SUFFIX0)#*hppp+blacker);
                                                  if(SUFFIX0)<=0:(SUFFIX0):=...

define_whole_blacker_pixels->...<=0:$:=1;fi.endfor
                                                  
l.171    (pen_size)
                   ;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> pen_size
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(pen_size)> ...#*hppp+blacker);if(SUFFIX0)<=0:
                                                  (SUFFIX0):=1;fi ENDFOR
define_whole_blacker_pixels->...<=0:$:=1;fi.endfor
                                                  
l.171    (pen_size)
                   ;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> 5.91429bigcap#+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
<for(fatness)> (SUFFIX0):=hround((SUFFIX0)#*hppp);
                                                   ENDFOR
define_whole_pixels->...$:=hround($ #*hppp);endfor
                                                  
l.174 ...jut, bigjut, smallspace, space, bigspace)
                                                  ;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> 0.65218fatness+0.1737
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
<for(jut)> (SUFFIX0):=hround((SUFFIX0)#*hppp);
                                               ENDFOR
l.174 ...jut, bigjut, smallspace, space, bigspace)
                                                  ;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> 1.08696fatness-0.04327
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
<for(bigjut)> (SUFFIX0):=hround((SUFFIX0)#*hppp);
                                                  ENDFOR
l.174 ...jut, bigjut, smallspace, space, bigspace)
                                                  ;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> 0.4bigjut+0.30005
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
<for(smallspace)> ...X0):=hround((SUFFIX0)#*hppp);
                                                   ENDFOR
l.174 ...jut, bigjut, smallspace, space, bigspace)
                                                  ;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> 0.8bigjut+0.1001
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
<for(space)> (SUFFIX0):=hround((SUFFIX0)#*hppp);
                                                 ENDFOR
l.174 ...jut, bigjut, smallspace, space, bigspace)
                                                  ;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> 1.2bigjut-0.09985
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
<for(bigspace)> ...FIX0):=hround((SUFFIX0)#*hppp);
                                                   ENDFOR
l.174 ...jut, bigjut, smallspace, space, bigspace)
                                                  ;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> 7.19989cap_height#+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
<for(CCurl)> (SUFFIX0):=vround((SUFFIX0)#*hppp);
                                                 ENDFOR
define_whole_vertical_pixels->...($ #*hppp);endfor
                                                  
l.177    (CCurl, cCurl, gCurl, hCurl, sixBowl)
                                              ;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> 4.79993lessthan#+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
<for(cCurl)> (SUFFIX0):=vround((SUFFIX0)#*hppp);
                                                 ENDFOR
l.177    (CCurl, cCurl, gCurl, hCurl, sixBowl)
                                              ;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> 7.19989desc_depth#+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
<for(gCurl)> (SUFFIX0):=vround((SUFFIX0)#*hppp);
                                                 ENDFOR
l.177    (CCurl, cCurl, gCurl, hCurl, sixBowl)
                                              ;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> 2cCurl-0.5003
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
<for(hCurl)> (SUFFIX0):=vround((SUFFIX0)#*hppp);
                                                 ENDFOR
l.177    (CCurl, cCurl, gCurl, hCurl, sixBowl)
                                              ;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> 2.50003hCurl-0.74915
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
<for(sixBowl)> (SUFFIX0):=vround((SUFFIX0)#*hppp);
                                                   ENDFOR
l.177    (CCurl, cCurl, gCurl, hCurl, sixBowl)
                                              ;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> define_whole_top_pixels
! Isolated expression.
<to be read again> 
                   (
l.180    (
          ATop, aTop, bTop, oneTop, bracketTop, QTailTop);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.180    (
          ATop, aTop, bTop, oneTop, bracketTop, QTailTop);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> define_whole_bottom_pixels
! Isolated expression.
<to be read again> 
                   (
l.183    (
          QTailBottom, aBottom, gBottom, bracketBottom);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.183    (
          QTailBottom, aBottom, gBottom, bracketBottom);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> (0,0,pen_size,0,0,pen_size)
! Transform components aren't all known.
<to be read again> 
                   ;
l.185 pickup pencircle scaled pen_size;
                                       
I'm unable to apply a partially specified transformation
except to a fully known pair or transform.
Proceed, and I'll omit the transformation.

>> 1.25002CCurl+0.37488
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   -
good.y->begingroup.vround((EXPR2)+pen_top)-
                                           pen_top.endgroup
<to be read again> 
                   ;
<for(ABar)> (SUFFIX0):=good.y((SUFFIX0)#*hppp);
                                                ENDFOR
define_good_y_pixels->...:=good.y($ #*hppp);endfor
                                                  
l.187    (ABar, BBar, GBar, eBar, threeBar)
                                           ;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> 2.08002ABar-0.03986
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   -
good.y->begingroup.vround((EXPR2)+pen_top)-
                                           pen_top.endgroup
<to be read again> 
                   ;
<for(BBar)> (SUFFIX0):=good.y((SUFFIX0)#*hppp);
                                                ENDFOR
l.187    (ABar, BBar, GBar, eBar, threeBar)
                                           ;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> 0.96153BBar+0.51935
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   -
good.y->begingroup.vround((EXPR2)+pen_top)-
                                           pen_top.endgroup
<to be read again> 
                   ;
<for(GBar)> (SUFFIX0):=good.y((SUFFIX0)#*hppp);
                                                ENDFOR
l.187    (ABar, BBar, GBar, eBar, threeBar)
                                           ;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> 36bar_height#+1
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   -
good.y->begingroup.vround((EXPR2)+pen_top)-
                                           pen_top.endgroup
<to be read again> 
                   ;
<for(eBar)> (SUFFIX0):=good.y((SUFFIX0)#*hppp);
                                                ENDFOR
l.187    (ABar, BBar, GBar, eBar, threeBar)
                                           ;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> 19.43976fig_height#+1
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   -
good.y->begingroup.vround((EXPR2)+pen_top)-
                                           pen_top.endgroup
<to be read again> 
                   ;
<for(threeBar)> ...FIX0):=good.y((SUFFIX0)#*hppp);
                                                   ENDFOR
l.187    (ABar, BBar, GBar, eBar, threeBar)
                                           ;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> 0.05556bigspace-0.02774
! Improper font parameter.
<to be read again> 
                   ;
l.196 font_normal_space := 6u#;
                               
I'm zeroing this one. Proceed, with fingers crossed.

>> 0.02777bigspace-0.01387
! Improper font parameter.
<to be read again> 
                   ;
l.197 font_normal_stretch := 3u#;
                                 
I'm zeroing this one. Proceed, with fingers crossed.

>> 0.01852bigspace-0.00925
! Improper font parameter.
<to be read again> 
                   ;
l.198 font_normal_shrink := 2u#;
                                
I'm zeroing this one. Proceed, with fingers crossed.

>> 0.16667bigspace-0.08322
! Improper font parameter.
<to be read again> 
                   ;
l.199 font_quad := 18u#;
                        
I'm zeroing this one. Proceed, with fingers crossed.

>> 0.01852bigspace-0.00925
! Improper font parameter.
<to be read again> 
                   ;
l.200 font_extra_space := 2u#;
                              
I'm zeroing this one. Proceed, with fingers crossed.

>> 0.02777sixBowl-0.01389
! Improper font parameter.
<to be read again> 
                   ;
l.201 font_x_height := x_height#;
                                 
I'm zeroing this one. Proceed, with fingers crossed.

) (/usr/share/texmf/fonts/source/public/bbold/bbgreeku.mf
>> bbcap
! Isolated expression.
<to be read again> 
                   (
l.9    (
        oct "000")
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.9    (
        oct "000")
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

Uppercase Greek Gamma
>> fatten.rightof.Bottom~Left
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.18             --
                    rightof Top~Left;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.18             --
                    rightof Top~Left;
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.18             --
                    rightof Top~Left;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> Top~Left
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.23          --
                 Top~Right
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.23          --
                 Top~Right
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.23          --
                 Top~Right
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> bbcap
! Isolated expression.
<to be read again> 
                   (
l.30    (
         oct "001")
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.30    (
         oct "001")
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> symmetric
! Isolated expression.
<to be read again> 
                   ;
l.33    symmetric;
                  
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

Uppercase Greek Delta
>> fatcliponce
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.40          (
               rightof Bottom~Left -- rightof Top~Middle)
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.40          (
               rightof Bottom~Left -- rightof Top~Middle)
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.40          (
               rightof Bottom~Left -- rightof Top~Middle)
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> Top~Middle
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.46          --
                 Bottom~Right;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.46          --
                 Bottom~Right;
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.46          --
                 Bottom~Right;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> Bottom~Left
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.51          --
                 Bottom~Right
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.51          --
                 Bottom~Right
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.51          --
                 Bottom~Right
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> bbcap
! Isolated expression.
<to be read again> 
                   (
l.58    (
         oct "002")
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.58    (
         oct "002")
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

Uppercase Greek Theta
>> var
! Isolated expression.
<to be read again> 
                   (
l.64    var (
             path) Thetapath;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.64    var (
             path) Thetapath;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

! Extra tokens will be flushed.
<to be read again> 
                   {
l.67       = oabove Top~Middle {
                                left}
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> fatcliptwice
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.76          (
               rightof obelow Bottom~Left -- oabove rightof Top~Left)
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.76          (
               rightof obelow Bottom~Left -- oabove rightof Top~Left)
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.76          (
               rightof obelow Bottom~Left -- oabove rightof Top~Left)
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> Thetapath
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
l.80    draw Thetapath;
                       
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
l.80    draw Thetapath;
                       
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
l.80    draw Thetapath;
                       
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> farrightof.Horizon~
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.84       farrightof Horizon~(
                               Left + space)
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.84       farrightof Horizon~(
                               Left + space)
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.84       farrightof Horizon~(
                               Left + space)
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> bbcap
! Isolated expression.
<to be read again> 
                   (
l.92    (
         oct "003")
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.92    (
         oct "003")
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> symmetric
! Isolated expression.
<to be read again> 
                   ;
l.95    symmetric;
                  
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

Uppercase Greek Lambda
>> fatcliponce
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.102          (
                rightof Bottom~Left -- rightof Top~Middle)
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.102          (
                rightof Bottom~Left -- rightof Top~Middle)
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.102          (
                rightof Bottom~Left -- rightof Top~Middle)
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> Top~Middle
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.108          --
                  Bottom~Right
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.108          --
                  Bottom~Right
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.108          --
                  Bottom~Right
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> bbcap
! Isolated expression.
<to be read again> 
                   (
l.115    (
          oct "004")
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.115    (
          oct "004")
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> symmetric
! Isolated expression.
<to be read again> 
                   ;
l.118    symmetric;
                   
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

Uppercase Greek Xi
>> Top~Left
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.125          --
                  Top~Right;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.125          --
                  Top~Right;
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.125          --
                  Top~Right;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> Horizon~
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.129       Horizon~(
                     Left + bigspace)
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.129       Horizon~(
                     Left + bigspace)
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.129       Horizon~(
                     Left + bigspace)
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> Bottom~Left
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.135          --
                  Bottom~Right
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.135          --
                  Bottom~Right
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.135          --
                  Bottom~Right
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> bbcap
! Isolated expression.
<to be read again> 
                   (
l.142    (
          oct "005")
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.142    (
          oct "005")
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

Uppercase Greek Pi
>> Top~Right
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.150          --
                  Bottom~Right;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.150          --
                  Bottom~Right;
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.150          --
                  Bottom~Right;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> Top~Left
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.155          --
                  Top~Right;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.155          --
                  Top~Right;
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.155          --
                  Top~Right;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> fatten.rightof.Top~Left
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.161             --
                     rightof Bottom~Left
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.161             --
                     rightof Bottom~Left
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.161             --
                     rightof Bottom~Left
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> bbcap
! Isolated expression.
<to be read again> 
                   (
l.168    (
          oct "006")
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.168    (
          oct "006")
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

Uppercase Greek Sigma
>> Top~Left
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.176          --
                  Top~Right;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.176          --
                  Top~Right;
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.176          --
                  Top~Right;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> Bottom~Left
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.181          --
                  Bottom~Right;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.181          --
                  Bottom~Right;
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.181          --
                  Bottom~Right;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> fatten.rightof.Bottom~Left
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.187             --
                     Horizon~Middle
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.187             --
                     Horizon~Middle
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.187             --
                     Horizon~Middle
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> bbcap
! Isolated expression.
<to be read again> 
                   (
l.195    (
          oct "007")
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.195    (
          oct "007")
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> fatsymmetric
! Isolated expression.
<to be read again> 
                   ;
l.198    fatsymmetric;
                      
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

Uppercase Greek Upsilon
>> fatten.Bottom~Middle
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.206             --
                     BBar~Middle;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.206             --
                     BBar~Middle;
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.206             --
                     BBar~Middle;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> leftof.BBar~Middle
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ..
---->..
       tension.infinity..
l.211          ---
                   leftof (Top - CCurl)~Middle
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ..
---->..
       tension.infinity..
l.211          ---
                   leftof (Top - CCurl)~Middle
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ..
---->..
       tension.infinity..
l.211          ---
                   leftof (Top - CCurl)~Middle
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> rightof.BBar~Middle
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
l.217       rightof BBar~Middle {
                                 up}
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
l.217       rightof BBar~Middle {
                                 up}
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
l.217       rightof BBar~Middle {
                                 up}
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> bbcap
! Isolated expression.
<to be read again> 
                   (
l.227    (
          oct "010")
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.227    (
          oct "010")
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> fatsymmetric
! Isolated expression.
<to be read again> 
                   ;
l.230    fatsymmetric;
                      
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

Uppercase Greek Phi
>> Top-0.38461BBar-0.30772
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ~
l.236       (Top - CCurl)~
                          Middle {left}
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ~
l.236       (Top - CCurl)~
                          Middle {left}
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ~
l.236       (Top - CCurl)~
                          Middle {left}
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> outline.fatten.Bottom~Middle
! Isolated expression.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.246             --
                     Top~Middle
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.246             --
                     Top~Middle
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> bbcap
! Isolated expression.
<to be read again> 
                   (
l.253    (
          oct "011")
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.253    (
          oct "011")
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> fatsymmetric
! Isolated expression.
<to be read again> 
                   ;
l.256    fatsymmetric;
                      
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

Uppercase Greek Psi
>> Top-0.38461BBar-0.30772
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ~
l.262       (Top - CCurl)~
                          Left {right}
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ~
l.262       (Top - CCurl)~
                          Left {right}
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ~
l.262       (Top - CCurl)~
                          Left {right}
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> outline.fatten.Bottom~Middle
! Isolated expression.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.272             --
                     Top~Middle
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.272             --
                     Top~Middle
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> bbcap
! Isolated expression.
<to be read again> 
                   (
l.279    (
          oct "012")
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.279    (
          oct "012")
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

Uppercase Greek Omega
>> var
! Isolated expression.
<to be read again> 
                   (
l.285    var (
              path) Omegapath;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.285    var (
              path) Omegapath;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

! Extra tokens will be flushed.
<to be read again> 
                   ..
l.289            ..
                    Horizon~Left {up}
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> fatcliptwice
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.297          (
                rightof Bottom~Left -- oabove rightof Top~Left)
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.297          (
                rightof Bottom~Left -- oabove rightof Top~Left)
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.297          (
                rightof Bottom~Left -- oabove rightof Top~Left)
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> Omegapath
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
l.301    draw Omegapath;
                        
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
l.301    draw Omegapath;
                        
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
l.301    draw Omegapath;
                        
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> Bottom~Left
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.306          --
                  farrightof Bottom~Left;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.306          --
                  farrightof Bottom~Left;
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.306          --
                  farrightof Bottom~Left;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> Bottom~Right
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.311          --
                  farleftof Bottom~Right
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.311          --
                  farleftof Bottom~Right
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.311          --
                  farleftof Bottom~Right
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

) (/usr/share/texmf/fonts/source/public/bbold/bbgreekl.mf
>> bbchar
! Isolated expression.
<to be read again> 
                   (
l.10    (
         oct "013")
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.10    (
         oct "013")
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

Lowercase Greek alpha
>> var
! Isolated expression.
<to be read again> 
                   (
l.17    var (
             path) alphapath;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.17    var (
             path) alphapath;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

! Extra tokens will be flushed.
<to be read again> 
                   (
l.20       = Top~(
                  Right + jut) {down}
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> fatcliptwice
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.29          (
               rightof obelow Bottom~Left -- rightof oabove Top~Left)
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.29          (
               rightof obelow Bottom~Left -- rightof oabove Top~Left)
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.29          (
               rightof obelow Bottom~Left -- rightof oabove Top~Left)
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> alphapath
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
endchar->scantokens.extra_endchar;
                                  if.proofing>0:makebox(proofrule);fi.chardx...
l.35 endchar
            ;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
endchar->scantokens.extra_endchar;
                                  if.proofing>0:makebox(proofrule);fi.chardx...
l.35 endchar
            ;
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
endchar->scantokens.extra_endchar;
                                  if.proofing>0:makebox(proofrule);fi.chardx...
l.35 endchar
            ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(0)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                           ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.35 endchar
            ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(h)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                           ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.35 endchar
            ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(h)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                           ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.35 endchar
            ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
<for(h)> proofrule((0,(EXPR0)),(w,(EXPR0)));
                                             ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.35 endchar
            ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(-d)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.35 endchar
            ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(-d)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.35 endchar
            ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
<for(-d)> proofrule((0,(EXPR0)),(w,(EXPR0)));
                                              ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.35 endchar
            ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(0)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.35 endchar
            ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
<for(0)> ...frule(((EXPR0),-d.o_),((EXPR0),h.o_));
                                                   ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.35 endchar
            ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->special"rule";numspecial.xpart(EXPR0);
                                                 numspecial.ypart(EXPR0);num...
<for(w)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.35 endchar
            ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(w)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.35 endchar
            ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(w)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.35 endchar
            ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
<for(w)> ...frule(((EXPR0),-d.o_),((EXPR0),h.o_));
                                                   ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.35 endchar
            ;
The expression shown above has the wrong type to be output.

>> w
! Internal quantity `chardx' must receive a known value.
<to be read again> 
                   ;
endchar->...ing>0:makebox(proofrule);fi.chardx:=w;
                                                  shipit;if.displaying>0:mak...
l.35 endchar
            ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

[0]
>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(0)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.35 endchar
            ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(h)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.35 endchar
            ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(h)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.35 endchar
            ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(h)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.35 endchar
            ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(-d)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                             ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.35 endchar
            ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(-d)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                             ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.35 endchar
            ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(-d)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                             ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.35 endchar
            ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(0)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.35 endchar
            ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(0)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.35 endchar
            ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.35 endchar
            ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.35 endchar
            ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.35 endchar
            ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.35 endchar
            ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

! Extra `endgroup'.
endchar->...makebox(screenrule);showit;fi.endgroup
                                                  
l.35 endchar
            ;
I'm not currently working on a `begingroup',
so I had better not try to end anything.

>> bbchar
! Isolated expression.
<to be read again> 
                   (
l.40    (
         oct "014")
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.40    (
         oct "014")
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

Lowercase Greek beta
>> var
! Isolated expression.
<to be read again> 
                   (
l.47    var (
             path) betapath;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.47    var (
             path) betapath;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

! Extra tokens will be flushed.
<to be read again> 
                   ..
---->..
       tension.infinity..
l.51            ---
                    aTop~Left
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> fatcliponce
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.59          (
               rightof Bottom~Left -- rightof oabove Top~Left)
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.59          (
               rightof Bottom~Left -- rightof oabove Top~Left)
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.59          (
               rightof Bottom~Left -- rightof oabove Top~Left)
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> betapath
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
l.63    draw betapath;
                      
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
l.63    draw betapath;
                      
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
l.63    draw betapath;
                      
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> rightof.aTop~Middle
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
l.67       rightof aTop~Middle {
                                right}
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
l.67       rightof aTop~Middle {
                                right}
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
l.67       rightof aTop~Middle {
                                right}
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> bbchar
! Isolated expression.
<to be read again> 
                   (
l.77    (
         oct "015")
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.77    (
         oct "015")
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

Lowercase Greek gamma
>> var
! Isolated expression.
<to be read again> 
                   (
l.84    var (
             path) gammapath;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.84    var (
             path) gammapath;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

! Extra tokens will be flushed.
<to be read again> 
                   {
l.87       = Top~Left {
                       right}
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> fatcliptwice
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.96          (
               obelow rightof Bottom~Left -- rightof Top~Left)
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.96          (
               obelow rightof Bottom~Left -- rightof Top~Left)
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.96          (
               obelow rightof Bottom~Left -- rightof Top~Left)
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> Top~Left
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
endchar->scantokens.extra_endchar;
                                  if.proofing>0:makebox(proofrule);fi.chardx...
l.102 endchar
             ;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
endchar->scantokens.extra_endchar;
                                  if.proofing>0:makebox(proofrule);fi.chardx...
l.102 endchar
             ;
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
endchar->scantokens.extra_endchar;
                                  if.proofing>0:makebox(proofrule);fi.chardx...
l.102 endchar
             ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(0)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                           ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.102 endchar
             ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(h)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                           ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.102 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(h)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                           ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.102 endchar
             ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
<for(h)> proofrule((0,(EXPR0)),(w,(EXPR0)));
                                             ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.102 endchar
             ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(-d)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.102 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(-d)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.102 endchar
             ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
<for(-d)> proofrule((0,(EXPR0)),(w,(EXPR0)));
                                              ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.102 endchar
             ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(0)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.102 endchar
             ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
<for(0)> ...frule(((EXPR0),-d.o_),((EXPR0),h.o_));
                                                   ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.102 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->special"rule";numspecial.xpart(EXPR0);
                                                 numspecial.ypart(EXPR0);num...
<for(w)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.102 endchar
             ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(w)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.102 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(w)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.102 endchar
             ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
<for(w)> ...frule(((EXPR0),-d.o_),((EXPR0),h.o_));
                                                   ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.102 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Internal quantity `chardx' must receive a known value.
<to be read again> 
                   ;
endchar->...ing>0:makebox(proofrule);fi.chardx:=w;
                                                  shipit;if.displaying>0:mak...
l.102 endchar
             ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

[0]
>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(0)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.102 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(h)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.102 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(h)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.102 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(h)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.102 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(-d)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                             ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.102 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(-d)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                             ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.102 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(-d)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                             ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.102 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(0)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.102 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(0)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.102 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.102 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.102 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.102 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.102 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

! Extra `endgroup'.
endchar->...makebox(screenrule);showit;fi.endgroup
                                                  
l.102 endchar
             ;
I'm not currently working on a `begingroup',
so I had better not try to end anything.

>> bbchar
! Isolated expression.
<to be read again> 
                   (
l.107    (
          oct "016")
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.107    (
          oct "016")
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

Lowercase Greek delta
>> var
! Isolated expression.
<to be read again> 
                   (
l.114    var (
              path) deltapath;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.114    var (
              path) deltapath;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

! Extra tokens will be flushed.
<to be read again> 
                   {
l.117       = aTop~Middle {
                           left}
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> fatcliptwice
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.129          (
                obelow rightof Bottom~Left -- rightof Top~Left)
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.129          (
                obelow rightof Bottom~Left -- rightof Top~Left)
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.129          (
                obelow rightof Bottom~Left -- rightof Top~Left)
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> deltapath
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
endchar->scantokens.extra_endchar;
                                  if.proofing>0:makebox(proofrule);fi.chardx...
l.135 endchar
             ;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
endchar->scantokens.extra_endchar;
                                  if.proofing>0:makebox(proofrule);fi.chardx...
l.135 endchar
             ;
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
endchar->scantokens.extra_endchar;
                                  if.proofing>0:makebox(proofrule);fi.chardx...
l.135 endchar
             ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(0)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                           ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.135 endchar
             ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(h)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                           ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.135 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(h)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                           ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.135 endchar
             ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
<for(h)> proofrule((0,(EXPR0)),(w,(EXPR0)));
                                             ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.135 endchar
             ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(-d)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.135 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(-d)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.135 endchar
             ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
<for(-d)> proofrule((0,(EXPR0)),(w,(EXPR0)));
                                              ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.135 endchar
             ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(0)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.135 endchar
             ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
<for(0)> ...frule(((EXPR0),-d.o_),((EXPR0),h.o_));
                                                   ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.135 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->special"rule";numspecial.xpart(EXPR0);
                                                 numspecial.ypart(EXPR0);num...
<for(w)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.135 endchar
             ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(w)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.135 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(w)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.135 endchar
             ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
<for(w)> ...frule(((EXPR0),-d.o_),((EXPR0),h.o_));
                                                   ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.135 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Internal quantity `chardx' must receive a known value.
<to be read again> 
                   ;
endchar->...ing>0:makebox(proofrule);fi.chardx:=w;
                                                  shipit;if.displaying>0:mak...
l.135 endchar
             ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

[0]
>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(0)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.135 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(h)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.135 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(h)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.135 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(h)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.135 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(-d)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                             ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.135 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(-d)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                             ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.135 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(-d)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                             ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.135 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(0)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.135 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(0)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.135 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.135 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.135 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.135 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.135 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

! Extra `endgroup'.
endchar->...makebox(screenrule);showit;fi.endgroup
                                                  
l.135 endchar
             ;
I'm not currently working on a `begingroup',
so I had better not try to end anything.

>> bbchar
! Isolated expression.
<to be read again> 
                   (
l.140    (
          oct "017")
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.140    (
          oct "017")
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

Lowercase Greek epsilon
>> var
! Isolated expression.
<to be read again> 
                   (
l.147    var (
              path) epsilonpath;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.147    var (
              path) epsilonpath;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

! Extra tokens will be flushed.
<to be read again> 
                   ~
l.150       = (Top - cCurl)~
                            Right
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> fatcliptwice
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.159          (
                obelow rightof Bottom~Left -- oabove rightof Top~Left)
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.159          (
                obelow rightof Bottom~Left -- oabove rightof Top~Left)
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.159          (
                obelow rightof Bottom~Left -- oabove rightof Top~Left)
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> Top-0.2sixBowl-0.39998
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
l.163    draw epsilonpath;
                          
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
l.163    draw epsilonpath;
                          
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
l.163    draw epsilonpath;
                          
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> farrightof.eBar~Left
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.168          --
                  farrightof eBar~(Left + jut)
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.168          --
                  farrightof eBar~(Left + jut)
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.168          --
                  farrightof eBar~(Left + jut)
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> bbchar
! Isolated expression.
<to be read again> 
                   (
l.175    (
          oct "020")
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.175    (
          oct "020")
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

Lowercase Greek zeta
>> var
! Isolated expression.
<to be read again> 
                   (
l.182    var (
              path) zetapath;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.182    var (
              path) zetapath;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

! Extra tokens will be flushed.
<to be read again> 
                   ..
l.186            ..
                    aMiddle~Left {down}
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> fatcliptwice
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.194          (
                rightof Bottom~Left -- rightof Top~Left)
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.194          (
                rightof Bottom~Left -- rightof Top~Left)
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.194          (
                rightof Bottom~Left -- rightof Top~Left)
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> Top~Right
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
endchar->scantokens.extra_endchar;
                                  if.proofing>0:makebox(proofrule);fi.chardx...
l.200 endchar
             ;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
endchar->scantokens.extra_endchar;
                                  if.proofing>0:makebox(proofrule);fi.chardx...
l.200 endchar
             ;
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
endchar->scantokens.extra_endchar;
                                  if.proofing>0:makebox(proofrule);fi.chardx...
l.200 endchar
             ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(0)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                           ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.200 endchar
             ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(h)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                           ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.200 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(h)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                           ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.200 endchar
             ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
<for(h)> proofrule((0,(EXPR0)),(w,(EXPR0)));
                                             ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.200 endchar
             ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(-d)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.200 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(-d)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.200 endchar
             ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
<for(-d)> proofrule((0,(EXPR0)),(w,(EXPR0)));
                                              ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.200 endchar
             ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(0)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.200 endchar
             ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
<for(0)> ...frule(((EXPR0),-d.o_),((EXPR0),h.o_));
                                                   ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.200 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->special"rule";numspecial.xpart(EXPR0);
                                                 numspecial.ypart(EXPR0);num...
<for(w)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.200 endchar
             ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(w)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.200 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(w)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.200 endchar
             ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
<for(w)> ...frule(((EXPR0),-d.o_),((EXPR0),h.o_));
                                                   ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.200 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Internal quantity `chardx' must receive a known value.
<to be read again> 
                   ;
endchar->...ing>0:makebox(proofrule);fi.chardx:=w;
                                                  shipit;if.displaying>0:mak...
l.200 endchar
             ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

[0]
>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(0)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.200 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(h)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.200 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(h)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.200 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(h)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.200 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(-d)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                             ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.200 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(-d)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                             ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.200 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(-d)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                             ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.200 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(0)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.200 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(0)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.200 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.200 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.200 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.200 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.200 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

! Extra `endgroup'.
endchar->...makebox(screenrule);showit;fi.endgroup
                                                  
l.200 endchar
             ;
I'm not currently working on a `begingroup',
so I had better not try to end anything.

>> bbchar
! Isolated expression.
<to be read again> 
                   (
l.205    (
          oct "021")
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.205    (
          oct "021")
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

Lowercase Greek eta
>> fatten.rightof.aBottom~Left
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.215             --
                     rightof Top~Left;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.215             --
                     rightof Top~Left;
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.215             --
                     rightof Top~Left;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> farrightof
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.219       farrightof (
                        Top - cCurl)~Left
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.219       farrightof (
                        Top - cCurl)~Left
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.219       farrightof (
                        Top - cCurl)~Left
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> bbchar
! Isolated expression.
<to be read again> 
                   (
l.229    (
          oct "022")
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.229    (
          oct "022")
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

Lowercase Greek theta
>> var
! Isolated expression.
<to be read again> 
                   (
l.236    var (
              path) thetapath;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.236    var (
              path) thetapath;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

! Extra tokens will be flushed.
<to be read again> 
                   {
l.239       = Horizon~Right {
                             up}
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> fatcliptwice
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.248          (
                rightof obelow Bottom~Left -- oabove rightof Top~Left)
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.248          (
                rightof obelow Bottom~Left -- oabove rightof Top~Left)
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.248          (
                rightof obelow Bottom~Left -- oabove rightof Top~Left)
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> thetapath
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
l.252    draw thetapath;
                        
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
l.252    draw thetapath;
                        
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
l.252    draw thetapath;
                        
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> farrightof.Horizon~Left
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.257          --
                  Horizon~Right
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.257          --
                  Horizon~Right
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.257          --
                  Horizon~Right
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> bbchar
! Isolated expression.
<to be read again> 
                   (
l.264    (
          oct "023")
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.264    (
          oct "023")
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

Lowercase Greek iota
>> fatcliponce
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.273          (
                Top~Middle -- Bottom~Middle)
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.273          (
                Top~Middle -- Bottom~Middle)
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.273          (
                Top~Middle -- Bottom~Middle)
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> bbchar
! Isolated expression.
<to be read again> 
                   (
l.282    (
          oct "024")
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.282    (
          oct "024")
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

Lowercase Greek kappa
>> fatten.rightof.Bottom~Left
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.292             --
                     rightof Top~Left;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.292             --
                     rightof Top~Left;
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.292             --
                     rightof Top~Left;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> farrightof.eBar~Left
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.297          --
                  Top~Right;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.297          --
                  Top~Right;
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.297          --
                  Top~Right;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> farrightof.eBar~Left
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
l.301       farrightof eBar~Left {
                                  right}
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
l.301       farrightof eBar~Left {
                                  right}
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
l.301       farrightof eBar~Left {
                                  right}
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> bbchar
! Isolated expression.
<to be read again> 
                   (
l.309    (
          oct "025")
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.309    (
          oct "025")
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

Lowercase Greek lambda
>> Horizon~Middle
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.318          --
                  Bottom~Left;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.318          --
                  Bottom~Left;
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.318          --
                  Bottom~Left;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> outline.fatten.rightof.Top~Left
! Isolated expression.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.324             --
                     leftof Bottom~Right
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.324             --
                     leftof Bottom~Right
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> bbchar
! Isolated expression.
<to be read again> 
                   (
l.331    (
          oct "026")
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.331    (
          oct "026")
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

Lowercase Greek mu
>> fatten.rightof.Bottom~Left
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.341             --
                     rightof Top~Left;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.341             --
                     rightof Top~Left;
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.341             --
                     rightof Top~Left;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> farrightof
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.345       farrightof (
                        aBottom + cCurl)~Left
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.345       farrightof (
                        aBottom + cCurl)~Left
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.345       farrightof (
                        aBottom + cCurl)~Left
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> Top~Right
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.353          --
                  aBottom~Right
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.353          --
                  aBottom~Right
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.353          --
                  aBottom~Right
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> bbchar
! Isolated expression.
<to be read again> 
                   (
l.360    (
          oct "027")
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.360    (
          oct "027")
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

Lowercase Greek nu
>> fatcliponce
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.369          (
                rightof Top~Left -- rightof Bottom~Left)
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.369          (
                rightof Top~Left -- rightof Bottom~Left)
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.369          (
                rightof Top~Left -- rightof Bottom~Left)
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> Bottom~Left
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ..
l.375          ..
                  Top~Right {up}
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ..
l.375          ..
                  Top~Right {up}
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ..
l.375          ..
                  Top~Right {up}
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> bbchar
! Isolated expression.
<to be read again> 
                   (
l.382    (
          oct "030")
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.382    (
          oct "030")
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

Lowercase Greek xi
>> var
! Isolated expression.
<to be read again> 
                   (
l.389    var (
              path) xitop, xibottom;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.389    var (
              path) xitop, xibottom;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

! Extra tokens will be flushed.
<to be read again> 
                   (
l.392       = farrightof aTop~(
                               Left + jut) {left}
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

! Extra tokens will be flushed.
<to be read again> 
                   {
l.399       = Top~Right {
                         left}
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> fatcliptwice
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.406          (
                rightof Bottom~Left -- rightof Top~Left)
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.406          (
                rightof Bottom~Left -- rightof Top~Left)
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.406          (
                rightof Bottom~Left -- rightof Top~Left)
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> Top~Right
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
l.410    draw xitop;
                    
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
l.410    draw xitop;
                    
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
l.410    draw xitop;
                    
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> fatcliptwice
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.415          (
                rightof Bottom~Left -- rightof Top~Left)
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.415          (
                rightof Bottom~Left -- rightof Top~Left)
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.415          (
                rightof Bottom~Left -- rightof Top~Left)
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> xibottom
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
endchar->scantokens.extra_endchar;
                                  if.proofing>0:makebox(proofrule);fi.chardx...
l.421 endchar
             ;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
endchar->scantokens.extra_endchar;
                                  if.proofing>0:makebox(proofrule);fi.chardx...
l.421 endchar
             ;
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
endchar->scantokens.extra_endchar;
                                  if.proofing>0:makebox(proofrule);fi.chardx...
l.421 endchar
             ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(0)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                           ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.421 endchar
             ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(h)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                           ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.421 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(h)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                           ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.421 endchar
             ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
<for(h)> proofrule((0,(EXPR0)),(w,(EXPR0)));
                                             ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.421 endchar
             ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(-d)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.421 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(-d)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.421 endchar
             ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
<for(-d)> proofrule((0,(EXPR0)),(w,(EXPR0)));
                                              ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.421 endchar
             ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(0)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.421 endchar
             ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
<for(0)> ...frule(((EXPR0),-d.o_),((EXPR0),h.o_));
                                                   ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.421 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->special"rule";numspecial.xpart(EXPR0);
                                                 numspecial.ypart(EXPR0);num...
<for(w)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.421 endchar
             ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(w)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.421 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(w)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.421 endchar
             ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
<for(w)> ...frule(((EXPR0),-d.o_),((EXPR0),h.o_));
                                                   ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.421 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Internal quantity `chardx' must receive a known value.
<to be read again> 
                   ;
endchar->...ing>0:makebox(proofrule);fi.chardx:=w;
                                                  shipit;if.displaying>0:mak...
l.421 endchar
             ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

[0]
>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(0)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.421 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(h)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.421 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(h)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.421 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(h)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.421 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(-d)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                             ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.421 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(-d)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                             ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.421 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(-d)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                             ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.421 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(0)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.421 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(0)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.421 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.421 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.421 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.421 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.421 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

! Extra `endgroup'.
endchar->...makebox(screenrule);showit;fi.endgroup
                                                  
l.421 endchar
             ;
I'm not currently working on a `begingroup',
so I had better not try to end anything.

>> bbchar
! Isolated expression.
<to be read again> 
                   (
l.426    (
          oct "031")
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.426    (
          oct "031")
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

Lowercase Greek pi
>> Top~Left
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ..
---->..
       tension.infinity..
l.435          ---
                   Top~Right;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ..
---->..
       tension.infinity..
l.435          ---
                   Top~Right;
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ..
---->..
       tension.infinity..
l.435          ---
                   Top~Right;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> fatten.rightof.Bottom~
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.440          rightof Bottom~(
                               Left + jut)
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.440          rightof Bottom~(
                               Left + jut)
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.440          rightof Bottom~(
                               Left + jut)
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> Bottom~
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.445       Bottom~(
                    Right - jut)
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.445       Bottom~(
                    Right - jut)
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.445       Bottom~(
                    Right - jut)
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> bbchar
! Isolated expression.
<to be read again> 
                   (
l.453    (
          oct "032")
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.453    (
          oct "032")
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

Lowercase Greek rho
>> var
! Isolated expression.
<to be read again> 
                   (
l.460    var (
              path) rhopath;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.460    var (
              path) rhopath;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

! Extra tokens will be flushed.
<to be read again> 
                   {
l.463       = aMiddle~Left {
                            up}
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> rhopath
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
l.470    draw rhopath;
                      
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
l.470    draw rhopath;
                      
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
l.470    draw rhopath;
                      
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> outline.fatcliponce
! Isolated expression.
<to be read again> 
                   (
l.475          (
                rightof Bottom~Left --  rightof bracketTop~Left)
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.475          (
                rightof Bottom~Left --  rightof bracketTop~Left)
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(0)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                           ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.478 endchar
             ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(h)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                           ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.478 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(h)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                           ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.478 endchar
             ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
<for(h)> proofrule((0,(EXPR0)),(w,(EXPR0)));
                                             ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.478 endchar
             ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(-d)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.478 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(-d)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.478 endchar
             ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
<for(-d)> proofrule((0,(EXPR0)),(w,(EXPR0)));
                                              ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.478 endchar
             ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(0)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.478 endchar
             ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
<for(0)> ...frule(((EXPR0),-d.o_),((EXPR0),h.o_));
                                                   ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.478 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->special"rule";numspecial.xpart(EXPR0);
                                                 numspecial.ypart(EXPR0);num...
<for(w)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.478 endchar
             ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(w)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.478 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(w)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.478 endchar
             ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
<for(w)> ...frule(((EXPR0),-d.o_),((EXPR0),h.o_));
                                                   ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.478 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Internal quantity `chardx' must receive a known value.
<to be read again> 
                   ;
endchar->...ing>0:makebox(proofrule);fi.chardx:=w;
                                                  shipit;if.displaying>0:mak...
l.478 endchar
             ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

[0]
>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(0)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.478 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(h)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.478 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(h)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.478 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(h)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.478 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(-d)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                             ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.478 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(-d)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                             ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.478 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(-d)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                             ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.478 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(0)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.478 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(0)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.478 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.478 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.478 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.478 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.478 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

! Extra `endgroup'.
endchar->...makebox(screenrule);showit;fi.endgroup
                                                  
l.478 endchar
             ;
I'm not currently working on a `begingroup',
so I had better not try to end anything.

>> bbchar
! Isolated expression.
<to be read again> 
                   (
l.483    (
          oct "033")
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.483    (
          oct "033")
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

Lowercase Greek sigma
>> var
! Isolated expression.
<to be read again> 
                   (
l.490    var (
              path) sigmapath;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.490    var (
              path) sigmapath;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

! Extra tokens will be flushed.
<to be read again> 
                   {
l.493       = Horizon~Right {
                             up}
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> fatcliptwice
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.502          (
                rightof obelow Bottom~Left -- rightof Top~Left)
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.502          (
                rightof obelow Bottom~Left -- rightof Top~Left)
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.502          (
                rightof obelow Bottom~Left -- rightof Top~Left)
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> thetapath
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
l.506    draw sigmapath;
                        
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
l.506    draw sigmapath;
                        
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
l.506    draw sigmapath;
                        
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> Top~Middle
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.511          --
                  Top~(Right + jut)
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.511          --
                  Top~(Right + jut)
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.511          --
                  Top~(Right + jut)
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> bbchar
! Isolated expression.
<to be read again> 
                   (
l.518    (
          oct "034")
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.518    (
          oct "034")
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> fatsymmetric
! Isolated expression.
<to be read again> 
                   ;
l.522    fatsymmetric;
                      
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

Lowercase Greek tau
>> Top~Left
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.529          --
                  Top~Right;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.529          --
                  Top~Right;
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.529          --
                  Top~Right;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> fatcliponce
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.534          (
                Top~Middle -- Bottom~Middle)
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.534          (
                Top~Middle -- Bottom~Middle)
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.534          (
                Top~Middle -- Bottom~Middle)
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> bbchar
! Isolated expression.
<to be read again> 
                   (
l.543    (
          oct "035")
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.543    (
          oct "035")
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

Lowercase Greek upsilon
>> var
! Isolated expression.
<to be read again> 
                   (
l.550    var (
              path) upsilonpath;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.550    var (
              path) upsilonpath;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

! Extra tokens will be flushed.
<to be read again> 
                   ..
---->..
       tension.infinity..
l.554            ---
                     (Bottom + hCurl)~Left
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> fatcliponce
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.562          (
                rightof Top~Left -- rightof obelow Bottom~Left)
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.562          (
                rightof Top~Left -- rightof obelow Bottom~Left)
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.562          (
                rightof Top~Left -- rightof obelow Bottom~Left)
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> Top~Left
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
endchar->scantokens.extra_endchar;
                                  if.proofing>0:makebox(proofrule);fi.chardx...
l.568 endchar
             ;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
endchar->scantokens.extra_endchar;
                                  if.proofing>0:makebox(proofrule);fi.chardx...
l.568 endchar
             ;
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
endchar->scantokens.extra_endchar;
                                  if.proofing>0:makebox(proofrule);fi.chardx...
l.568 endchar
             ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(0)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                           ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.568 endchar
             ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(h)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                           ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.568 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(h)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                           ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.568 endchar
             ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
<for(h)> proofrule((0,(EXPR0)),(w,(EXPR0)));
                                             ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.568 endchar
             ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(-d)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.568 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(-d)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.568 endchar
             ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
<for(-d)> proofrule((0,(EXPR0)),(w,(EXPR0)));
                                              ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.568 endchar
             ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(0)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.568 endchar
             ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
<for(0)> ...frule(((EXPR0),-d.o_),((EXPR0),h.o_));
                                                   ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.568 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->special"rule";numspecial.xpart(EXPR0);
                                                 numspecial.ypart(EXPR0);num...
<for(w)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.568 endchar
             ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(w)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.568 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(w)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.568 endchar
             ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
<for(w)> ...frule(((EXPR0),-d.o_),((EXPR0),h.o_));
                                                   ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.568 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Internal quantity `chardx' must receive a known value.
<to be read again> 
                   ;
endchar->...ing>0:makebox(proofrule);fi.chardx:=w;
                                                  shipit;if.displaying>0:mak...
l.568 endchar
             ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

[0]
>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(0)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.568 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(h)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.568 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(h)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.568 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(h)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.568 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(-d)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                             ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.568 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(-d)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                             ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.568 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(-d)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                             ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.568 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(0)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.568 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(0)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.568 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.568 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.568 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.568 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.568 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

! Extra `endgroup'.
endchar->...makebox(screenrule);showit;fi.endgroup
                                                  
l.568 endchar
             ;
I'm not currently working on a `begingroup',
so I had better not try to end anything.

>> bbchar
! Isolated expression.
<to be read again> 
                   (
l.573    (
          oct "036")
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.573    (
          oct "036")
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> fatsymmetric
! Isolated expression.
<to be read again> 
                   ;
l.577    fatsymmetric;
                      
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

Lowercase Greek phi
>> Middle~Right
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
l.583       Middle~Right {
                          up}
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
l.583       Middle~Right {
                          up}
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
l.583       Middle~Right {
                          up}
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> outline.fatten.Top~Middle
! Isolated expression.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.593             --
                     Bottom~Middle
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.593             --
                     Bottom~Middle
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> bbchar
! Isolated expression.
<to be read again> 
                   (
l.600    (
          oct "037")
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.600    (
          oct "037")
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

Lowercase Greek chi
>> Top~Left
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.609          --
                  Bottom~Right;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.609          --
                  Bottom~Right;
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.609          --
                  Bottom~Right;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> outline.fatten.leftof.Top~Right
! Isolated expression.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.615             --
                     rightof Bottom~Left
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.615             --
                     rightof Bottom~Left
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> bbchar
! Isolated expression.
<to be read again> 
                   (
l.622    (
          oct "040")
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.622    (
          oct "040")
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> fatsymmetric
! Isolated expression.
<to be read again> 
                   ;
l.626    fatsymmetric;
                      
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

Lowercase Greek psi
>> aTop~Left
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ..
---->..
       tension.infinity..
l.633          ---
                   (aBottom + hCurl)~Left
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ..
---->..
       tension.infinity..
l.633          ---
                   (aBottom + hCurl)~Left
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ..
---->..
       tension.infinity..
l.633          ---
                   (aBottom + hCurl)~Left
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> outline.fatten.Top~Middle
! Isolated expression.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.642             --
                     Bottom~Middle
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.642             --
                     Bottom~Middle
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> bbchar
! Isolated expression.
<to be read again> 
                   (
l.649    (
          oct "177")
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.649    (
          oct "177")
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> symmetric
! Isolated expression.
<to be read again> 
                   ;
l.653    symmetric;
                   
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

Lowercase Greek omega
>> var
! Isolated expression.
<to be read again> 
                   (
l.658    var (
              path) omegapath;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.658    var (
              path) omegapath;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

! Extra tokens will be flushed.
<to be read again> 
                   ..
l.662            ..
                    Horizon~Left {down}
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> fatcliptwice
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.669          (
                rightof Top~Left -- obelow rightof Bottom~Left)
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.669          (
                rightof Top~Left -- obelow rightof Bottom~Left)
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.669          (
                rightof Top~Left -- obelow rightof Bottom~Left)
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> omegapath
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
l.673    draw omegapath;
                        
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
l.673    draw omegapath;
                        
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
l.673    draw omegapath;
                        
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> eBar~Middle
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
l.677       eBar~Middle {
                         down}
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
l.677       eBar~Middle {
                         down}
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
l.677       eBar~Middle {
                         down}
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

) (/usr/share/texmf/fonts/source/public/bbold/bbnum.mf
>> bbnum
! Isolated expression.
<to be read again> 
                   (
l.5 bbnum (
           "0");
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.5 bbnum (
           "0");
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

The number 0
>> var
! Isolated expression.
<to be read again> 
                   (
l.9    var (
            path) zeropath;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.9    var (
            path) zeropath;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

! Extra tokens will be flushed.
<to be read again> 
                   {
l.12       = oabove Top~Middle {
                                left}
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> fatcliptwice
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.21          (
               obelow rightof Bottom~Left -- oabove rightof Top~Left)
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.21          (
               obelow rightof Bottom~Left -- oabove rightof Top~Left)
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.21          (
               obelow rightof Bottom~Left -- oabove rightof Top~Left)
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> Thetapath
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
l.25    draw zeropath;
                      
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
l.25    draw zeropath;
                      
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
l.25    draw zeropath;
                      
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(0)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                           ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.27 endchar
            ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(h)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                           ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.27 endchar
            ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(h)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                           ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.27 endchar
            ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
<for(h)> proofrule((0,(EXPR0)),(w,(EXPR0)));
                                             ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.27 endchar
            ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(-d)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.27 endchar
            ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(-d)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.27 endchar
            ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
<for(-d)> proofrule((0,(EXPR0)),(w,(EXPR0)));
                                              ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.27 endchar
            ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(0)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.27 endchar
            ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
<for(0)> ...frule(((EXPR0),-d.o_),((EXPR0),h.o_));
                                                   ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.27 endchar
            ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->special"rule";numspecial.xpart(EXPR0);
                                                 numspecial.ypart(EXPR0);num...
<for(w)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.27 endchar
            ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(w)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.27 endchar
            ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(w)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.27 endchar
            ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
<for(w)> ...frule(((EXPR0),-d.o_),((EXPR0),h.o_));
                                                   ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.27 endchar
            ;
The expression shown above has the wrong type to be output.

>> w
! Internal quantity `chardx' must receive a known value.
<to be read again> 
                   ;
endchar->...ing>0:makebox(proofrule);fi.chardx:=w;
                                                  shipit;if.displaying>0:mak...
l.27 endchar
            ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

[0]
>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(0)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.27 endchar
            ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(h)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.27 endchar
            ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(h)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.27 endchar
            ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(h)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.27 endchar
            ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(-d)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                             ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.27 endchar
            ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(-d)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                             ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.27 endchar
            ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(-d)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                             ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.27 endchar
            ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(0)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.27 endchar
            ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(0)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.27 endchar
            ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.27 endchar
            ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.27 endchar
            ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.27 endchar
            ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.27 endchar
            ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

! Extra `endgroup'.
endchar->...makebox(screenrule);showit;fi.endgroup
                                                  
l.27 endchar
            ;
I'm not currently working on a `begingroup',
so I had better not try to end anything.

>> bbnum
! Isolated expression.
<to be read again> 
                   (
l.31 bbnum (
            "1");
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.31 bbnum (
            "1");
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> fatsymmetric
! Isolated expression.
<to be read again> 
                   ;
l.33    fatsymmetric;
                     
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

The number 1
>> rightof.Top~Middle
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.40         --
                (Top - CCurl)~Left;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.40         --
                (Top - CCurl)~Left;
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.40         --
                (Top - CCurl)~Left;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> fatcliponce
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.45          (
               Bottom~Middle -- Top~Middle)
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.45          (
               Bottom~Middle -- Top~Middle)
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.45          (
               Bottom~Middle -- Top~Middle)
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> Bottom~Left
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.51          --
                 Bottom~Right
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.51          --
                 Bottom~Right
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.51          --
                 Bottom~Right
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> bbnum
! Isolated expression.
<to be read again> 
                   (
l.57 bbnum (
            "2");
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.57 bbnum (
            "2");
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

The number 2
>> var
! Isolated expression.
<to be read again> 
                   (
l.61    var (
             path) twopath;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.61    var (
             path) twopath;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

! Extra tokens will be flushed.
<to be read again> 
                   ~
l.64       = (Top-CCurl)~
                         Left
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> fatcliptwice
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.72          (
               leftof Bottom~Right -- oabove leftof Top~Right)
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.72          (
               leftof Bottom~Right -- oabove leftof Top~Right)
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.72          (
               leftof Bottom~Right -- oabove leftof Top~Right)
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> Top-0.38461BBar-0.30772
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
l.76    draw twopath;
                     
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
l.76    draw twopath;
                     
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
l.76    draw twopath;
                     
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> Bottom~Left
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.81          --
                 Bottom~Right
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.81          --
                 Bottom~Right
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.81          --
                 Bottom~Right
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> bbnum
! Isolated expression.
<to be read again> 
                   (
l.87 bbnum (
            "3");
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.87 bbnum (
            "3");
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

The number 3
>> var
! Isolated expression.
<to be read again> 
                   (
l.91    var (
             path) threepath;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.91    var (
             path) threepath;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

! Extra tokens will be flushed.
<to be read again> 
                   ~
l.94       = (Top - CCurl)~
                           Left
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> fatcliptwice
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.106          (
                leftof threeBar~Right -- oabove leftof Top~Right)
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.106          (
                leftof threeBar~Right -- oabove leftof Top~Right)
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.106          (
                leftof threeBar~Right -- oabove leftof Top~Right)
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> fatcliptwice
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.112          (
                obelow leftof Bottom~Right -- leftof threeBar~Right)
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.112          (
                obelow leftof Bottom~Right -- leftof threeBar~Right)
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.112          (
                obelow leftof Bottom~Right -- leftof threeBar~Right)
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> Top-0.38461BBar-0.30772
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
endchar->scantokens.extra_endchar;
                                  if.proofing>0:makebox(proofrule);fi.chardx...
l.118 endchar
             ;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
endchar->scantokens.extra_endchar;
                                  if.proofing>0:makebox(proofrule);fi.chardx...
l.118 endchar
             ;
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
endchar->scantokens.extra_endchar;
                                  if.proofing>0:makebox(proofrule);fi.chardx...
l.118 endchar
             ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(0)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                           ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.118 endchar
             ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(h)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                           ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.118 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(h)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                           ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.118 endchar
             ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
<for(h)> proofrule((0,(EXPR0)),(w,(EXPR0)));
                                             ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.118 endchar
             ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(-d)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.118 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(-d)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.118 endchar
             ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
<for(-d)> proofrule((0,(EXPR0)),(w,(EXPR0)));
                                              ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.118 endchar
             ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(0)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.118 endchar
             ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
<for(0)> ...frule(((EXPR0),-d.o_),((EXPR0),h.o_));
                                                   ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.118 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->special"rule";numspecial.xpart(EXPR0);
                                                 numspecial.ypart(EXPR0);num...
<for(w)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.118 endchar
             ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(w)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.118 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(w)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.118 endchar
             ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
<for(w)> ...frule(((EXPR0),-d.o_),((EXPR0),h.o_));
                                                   ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.118 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Internal quantity `chardx' must receive a known value.
<to be read again> 
                   ;
endchar->...ing>0:makebox(proofrule);fi.chardx:=w;
                                                  shipit;if.displaying>0:mak...
l.118 endchar
             ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

[0]
>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(0)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.118 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(h)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.118 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(h)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.118 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(h)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.118 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(-d)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                             ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.118 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(-d)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                             ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.118 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(-d)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                             ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.118 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(0)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.118 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(0)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.118 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.118 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.118 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.118 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.118 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

! Extra `endgroup'.
endchar->...makebox(screenrule);showit;fi.endgroup
                                                  
l.118 endchar
             ;
I'm not currently working on a `begingroup',
so I had better not try to end anything.

>> bbnum
! Isolated expression.
<to be read again> 
                   (
l.122 bbnum (
             "4");
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.122 bbnum (
             "4");
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

The number 4
>> var
! Isolated expression.
<to be read again> 
                   (
l.126    var (
              numeric) verticalRight;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.126    var (
              numeric) verticalRight;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> ABar~Left
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.133          --
                  ABar~Right;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.133          --
                  ABar~Right;
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.133          --
                  ABar~Right;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> outline.fatcliponce
! Isolated expression.
<to be read again> 
                   (
l.138          (
                leftof Bottom~verticalRight -- leftof Top~verticalRight)
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.138          (
                leftof Bottom~verticalRight -- leftof Top~verticalRight)
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> Top~verticalRight
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.144          --
                  ABar~Left
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.144          --
                  ABar~Left
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.144          --
                  ABar~Left
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> bbnum
! Isolated expression.
<to be read again> 
                   (
l.150 bbnum (
             "5");
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.150 bbnum (
             "5");
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

The number 5
>> Top~Left
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.156          --
                  Top~Right;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.156          --
                  Top~Right;
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.156          --
                  Top~Right;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> fatten.rightof
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.161          rightof (
                        Bottom + sixBowl)~Left
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.161          rightof (
                        Bottom + sixBowl)~Left
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.161          rightof (
                        Bottom + sixBowl)~Left
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> Bottom+sixBowl
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ~
l.166       (Bottom + sixBowl)~
                               Left
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ~
l.166       (Bottom + sixBowl)~
                               Left
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ~
l.166       (Bottom + sixBowl)~
                               Left
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> bbnum
! Isolated expression.
<to be read again> 
                   (
l.176 bbnum (
             "6");
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.176 bbnum (
             "6");
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

The number 6
>> var
! Isolated expression.
<to be read again> 
                   (
l.180    var (
              path) sixpath;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.180    var (
              path) sixpath;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

! Extra tokens will be flushed.
<to be read again> 
                   ~
l.183       = (Bottom + 1/2sixBowl)~
                                    Right {up}
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> Bottom+0.5sixBowl
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ~
l.191       (Bottom + 1/2sixBowl)~
                                  Left
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ~
l.191       (Bottom + 1/2sixBowl)~
                                  Left
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ~
l.191       (Bottom + 1/2sixBowl)~
                                  Left
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> fatcliptwice
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.199          (
                obelow rightof Bottom~Left -- rightof (Bottom + sixBowl)~Left)
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.199          (
                obelow rightof Bottom~Left -- rightof (Bottom + sixBowl)~Left)
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.199          (
                obelow rightof Bottom~Left -- rightof (Bottom + sixBowl)~Left)
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> Bottom+0.5sixBowl
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
endchar->scantokens.extra_endchar;
                                  if.proofing>0:makebox(proofrule);fi.chardx...
l.205 endchar
             ;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
endchar->scantokens.extra_endchar;
                                  if.proofing>0:makebox(proofrule);fi.chardx...
l.205 endchar
             ;
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
endchar->scantokens.extra_endchar;
                                  if.proofing>0:makebox(proofrule);fi.chardx...
l.205 endchar
             ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(0)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                           ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.205 endchar
             ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(h)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                           ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.205 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(h)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                           ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.205 endchar
             ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
<for(h)> proofrule((0,(EXPR0)),(w,(EXPR0)));
                                             ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.205 endchar
             ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(-d)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.205 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(-d)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.205 endchar
             ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
<for(-d)> proofrule((0,(EXPR0)),(w,(EXPR0)));
                                              ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.205 endchar
             ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(0)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.205 endchar
             ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
<for(0)> ...frule(((EXPR0),-d.o_),((EXPR0),h.o_));
                                                   ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.205 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->special"rule";numspecial.xpart(EXPR0);
                                                 numspecial.ypart(EXPR0);num...
<for(w)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.205 endchar
             ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(w)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.205 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(w)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.205 endchar
             ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
<for(w)> ...frule(((EXPR0),-d.o_),((EXPR0),h.o_));
                                                   ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.205 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Internal quantity `chardx' must receive a known value.
<to be read again> 
                   ;
endchar->...ing>0:makebox(proofrule);fi.chardx:=w;
                                                  shipit;if.displaying>0:mak...
l.205 endchar
             ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

[0]
>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(0)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.205 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(h)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.205 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(h)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.205 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(h)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.205 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(-d)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                             ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.205 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(-d)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                             ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.205 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(-d)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                             ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.205 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(0)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.205 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(0)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.205 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.205 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.205 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.205 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.205 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

! Extra `endgroup'.
endchar->...makebox(screenrule);showit;fi.endgroup
                                                  
l.205 endchar
             ;
I'm not currently working on a `begingroup',
so I had better not try to end anything.

>> bbnum
! Isolated expression.
<to be read again> 
                   (
l.209 bbnum (
             "7");
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.209 bbnum (
             "7");
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

The number 7
>> Top~Left
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.215          --
                  Top~Right;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.215          --
                  Top~Right;
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.215          --
                  Top~Right;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> fatten.rightof.Bottom~Left
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.221             --
                     leftof Top~Right
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.221             --
                     leftof Top~Right
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.221             --
                     leftof Top~Right
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> bbnum
! Isolated expression.
<to be read again> 
                   (
l.227 bbnum (
             "8");
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.227 bbnum (
             "8");
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

The number 8
>> var
! Isolated expression.
<to be read again> 
                   (
l.231    var (
              path) eighttop, eightbottom;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.231    var (
              path) eighttop, eightbottom;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

! Extra tokens will be flushed.
<to be read again> 
                   {
l.234       = oabove Top~Middle {
                                 left}
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

! Extra tokens will be flushed.
<to be read again> 
                   {
l.241       = threeBar~Middle {
                               left}
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> fatcliptwice
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.250          (
                obelow rightof Bottom~Left -- oabove rightof Top~Left)
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.250          (
                obelow rightof Bottom~Left -- oabove rightof Top~Left)
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.250          (
                obelow rightof Bottom~Left -- oabove rightof Top~Left)
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> fatcliptwice
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.256          (
                obelow rightof Bottom~Left -- oabove rightof Top~Left)
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.256          (
                obelow rightof Bottom~Left -- oabove rightof Top~Left)
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.256          (
                obelow rightof Bottom~Left -- oabove rightof Top~Left)
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> Thetapath
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
l.260    draw eighttop;
                       
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
l.260    draw eighttop;
                       
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
l.260    draw eighttop;
                       
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> eightbottom
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
endchar->scantokens.extra_endchar;
                                  if.proofing>0:makebox(proofrule);fi.chardx...
l.265 endchar
             ;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
endchar->scantokens.extra_endchar;
                                  if.proofing>0:makebox(proofrule);fi.chardx...
l.265 endchar
             ;
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
endchar->scantokens.extra_endchar;
                                  if.proofing>0:makebox(proofrule);fi.chardx...
l.265 endchar
             ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(0)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                           ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.265 endchar
             ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(h)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                           ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.265 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(h)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                           ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.265 endchar
             ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
<for(h)> proofrule((0,(EXPR0)),(w,(EXPR0)));
                                             ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.265 endchar
             ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(-d)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.265 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(-d)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.265 endchar
             ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
<for(-d)> proofrule((0,(EXPR0)),(w,(EXPR0)));
                                              ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.265 endchar
             ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(0)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.265 endchar
             ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
<for(0)> ...frule(((EXPR0),-d.o_),((EXPR0),h.o_));
                                                   ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.265 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->special"rule";numspecial.xpart(EXPR0);
                                                 numspecial.ypart(EXPR0);num...
<for(w)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.265 endchar
             ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(w)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.265 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(w)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.265 endchar
             ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
<for(w)> ...frule(((EXPR0),-d.o_),((EXPR0),h.o_));
                                                   ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.265 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Internal quantity `chardx' must receive a known value.
<to be read again> 
                   ;
endchar->...ing>0:makebox(proofrule);fi.chardx:=w;
                                                  shipit;if.displaying>0:mak...
l.265 endchar
             ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

[0]
>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(0)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.265 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(h)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.265 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(h)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.265 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(h)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.265 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(-d)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                             ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.265 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(-d)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                             ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.265 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(-d)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                             ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.265 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(0)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.265 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(0)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.265 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.265 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.265 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.265 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.265 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

! Extra `endgroup'.
endchar->...makebox(screenrule);showit;fi.endgroup
                                                  
l.265 endchar
             ;
I'm not currently working on a `begingroup',
so I had better not try to end anything.

>> bbnum
! Isolated expression.
<to be read again> 
                   (
l.269 bbnum (
             "9");
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.269 bbnum (
             "9");
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

The number 9
>> var
! Isolated expression.
<to be read again> 
                   (
l.273    var (
              path) ninepath;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.273    var (
              path) ninepath;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

! Extra tokens will be flushed.
<to be read again> 
                   ~
l.276       = (Top - sixBowl)~
                              Middle {left}
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> Top-0.5sixBowl
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ~
l.284       (Top - 1/2sixBowl)~
                               Right
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ~
l.284       (Top - 1/2sixBowl)~
                               Right
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ~
l.284       (Top - 1/2sixBowl)~
                               Right
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> fatcliptwice
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.292          (
                oabove rightof Top~Left -- rightof (Top - sixBowl)~Left)
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.292          (
                oabove rightof Top~Left -- rightof (Top - sixBowl)~Left)
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.292          (
                oabove rightof Top~Left -- rightof (Top - sixBowl)~Left)
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> Top-sixBowl
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
endchar->scantokens.extra_endchar;
                                  if.proofing>0:makebox(proofrule);fi.chardx...
l.298 endchar
             ;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
endchar->scantokens.extra_endchar;
                                  if.proofing>0:makebox(proofrule);fi.chardx...
l.298 endchar
             ;
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
endchar->scantokens.extra_endchar;
                                  if.proofing>0:makebox(proofrule);fi.chardx...
l.298 endchar
             ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(0)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                           ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.298 endchar
             ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(h)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                           ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.298 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(h)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                           ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.298 endchar
             ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
<for(h)> proofrule((0,(EXPR0)),(w,(EXPR0)));
                                             ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.298 endchar
             ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(-d)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.298 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(-d)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.298 endchar
             ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
<for(-d)> proofrule((0,(EXPR0)),(w,(EXPR0)));
                                              ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.298 endchar
             ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(0)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.298 endchar
             ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
<for(0)> ...frule(((EXPR0),-d.o_),((EXPR0),h.o_));
                                                   ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.298 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->special"rule";numspecial.xpart(EXPR0);
                                                 numspecial.ypart(EXPR0);num...
<for(w)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.298 endchar
             ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(w)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.298 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(w)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.298 endchar
             ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
<for(w)> ...frule(((EXPR0),-d.o_),((EXPR0),h.o_));
                                                   ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.298 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Internal quantity `chardx' must receive a known value.
<to be read again> 
                   ;
endchar->...ing>0:makebox(proofrule);fi.chardx:=w;
                                                  shipit;if.displaying>0:mak...
l.298 endchar
             ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

[0]
>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(0)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.298 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(h)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.298 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(h)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.298 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(h)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.298 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(-d)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                             ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.298 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(-d)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                             ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.298 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(-d)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                             ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.298 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(0)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.298 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(0)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.298 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.298 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.298 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.298 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.298 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

! Extra `endgroup'.
endchar->...makebox(screenrule);showit;fi.endgroup
                                                  
l.298 endchar
             ;
I'm not currently working on a `begingroup',
so I had better not try to end anything.

) (/usr/share/texmf/fonts/source/public/bbold/bbupper.mf
>> bbcap
! Isolated expression.
<to be read again> 
                   (
l.6    (
        "A")
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.6    (
        "A")
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

The letter A
>> cliptwice
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.14          (
               ABar~Left -- ABar~Right)
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.14          (
               ABar~Left -- ABar~Right)
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.14          (
               ABar~Left -- ABar~Right)
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> outline.fatcliponce
! Isolated expression.
<to be read again> 
                   (
l.20          (
               rightof Bottom~Left -- rightof Top~Middle)
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.20          (
               rightof Bottom~Left -- rightof Top~Middle)
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> Top~Middle
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.26          --
                 Bottom~Right
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.26          --
                 Bottom~Right
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.26          --
                 Bottom~Right
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> bbcap
! Isolated expression.
<to be read again> 
                   (
l.33    (
         "B")
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.33    (
         "B")
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

The letter B
>> Top~Left
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.41          --
                 Top~Middle {right}
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.41          --
                 Top~Middle {right}
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.41          --
                 Top~Middle {right}
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> BBar~Left
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.49          --
                 BBar~Middle {right}
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.49          --
                 BBar~Middle {right}
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.49          --
                 BBar~Middle {right}
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> outline.fatten.rightof.Top~Left
! Isolated expression.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.58             --
                    rightof Bottom~Left
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.58             --
                    rightof Bottom~Left
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> bbcap
! Isolated expression.
<to be read again> 
                   (
l.65    (
         "C")
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.65    (
         "C")
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

The letter C
>> var
! Isolated expression.
<to be read again> 
                   (
l.71    var (
             path) Cpath;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.71    var (
             path) Cpath;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

! Extra tokens will be flushed.
<to be read again> 
                   ~
l.74       = (Top - CCurl)~
                           Right
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> fatcliptwice
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.83          (
               obelow rightof Bottom~Left -- oabove rightof Top~Left)
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.83          (
               obelow rightof Bottom~Left -- oabove rightof Top~Left)
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.83          (
               obelow rightof Bottom~Left -- oabove rightof Top~Left)
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> Top-0.38461BBar-0.30772
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
endchar->scantokens.extra_endchar;
                                  if.proofing>0:makebox(proofrule);fi.chardx...
l.89 endchar
            ;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
endchar->scantokens.extra_endchar;
                                  if.proofing>0:makebox(proofrule);fi.chardx...
l.89 endchar
            ;
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
endchar->scantokens.extra_endchar;
                                  if.proofing>0:makebox(proofrule);fi.chardx...
l.89 endchar
            ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(0)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                           ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.89 endchar
            ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(h)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                           ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.89 endchar
            ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(h)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                           ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.89 endchar
            ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
<for(h)> proofrule((0,(EXPR0)),(w,(EXPR0)));
                                             ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.89 endchar
            ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(-d)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.89 endchar
            ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(-d)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.89 endchar
            ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
<for(-d)> proofrule((0,(EXPR0)),(w,(EXPR0)));
                                              ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.89 endchar
            ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(0)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.89 endchar
            ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
<for(0)> ...frule(((EXPR0),-d.o_),((EXPR0),h.o_));
                                                   ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.89 endchar
            ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->special"rule";numspecial.xpart(EXPR0);
                                                 numspecial.ypart(EXPR0);num...
<for(w)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.89 endchar
            ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(w)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.89 endchar
            ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(w)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.89 endchar
            ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
<for(w)> ...frule(((EXPR0),-d.o_),((EXPR0),h.o_));
                                                   ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.89 endchar
            ;
The expression shown above has the wrong type to be output.

>> w
! Internal quantity `chardx' must receive a known value.
<to be read again> 
                   ;
endchar->...ing>0:makebox(proofrule);fi.chardx:=w;
                                                  shipit;if.displaying>0:mak...
l.89 endchar
            ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

[0]
>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(0)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.89 endchar
            ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(h)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.89 endchar
            ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(h)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.89 endchar
            ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(h)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.89 endchar
            ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(-d)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                             ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.89 endchar
            ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(-d)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                             ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.89 endchar
            ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(-d)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                             ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.89 endchar
            ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(0)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.89 endchar
            ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(0)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.89 endchar
            ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.89 endchar
            ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.89 endchar
            ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.89 endchar
            ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.89 endchar
            ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

! Extra `endgroup'.
endchar->...makebox(screenrule);showit;fi.endgroup
                                                  
l.89 endchar
            ;
I'm not currently working on a `begingroup',
so I had better not try to end anything.

>> bbcap
! Isolated expression.
<to be read again> 
                   (
l.94    (
         "D")
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.94    (
         "D")
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

The letter D
>> Top~Left
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.102          --
                  Top~Middle {right}
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.102          --
                  Top~Middle {right}
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.102          --
                  Top~Middle {right}
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> fatten.rightof.Top~Left
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ..
---->..
       tension.infinity..
l.111             ---
                      rightof Bottom~Left
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ..
---->..
       tension.infinity..
l.111             ---
                      rightof Bottom~Left
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ..
---->..
       tension.infinity..
l.111             ---
                      rightof Bottom~Left
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> bbcap
! Isolated expression.
<to be read again> 
                   (
l.118    (
          "E")
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.118    (
          "E")
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

The letter E
>> Top~Left
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.126          --
                  Top~Right;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.126          --
                  Top~Right;
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.126          --
                  Top~Right;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> BBar~Left
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.131          --
                  farrightof BBar~(Left + bigjut);
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.131          --
                  farrightof BBar~(Left + bigjut);
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.131          --
                  farrightof BBar~(Left + bigjut);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> Bottom~Left
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.136          --
                  Bottom~Right;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.136          --
                  Bottom~Right;
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.136          --
                  Bottom~Right;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> outline.fatten.rightof.Top~Left
! Isolated expression.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.142             --
                     rightof Bottom~Left
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.142             --
                     rightof Bottom~Left
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> bbcap
! Isolated expression.
<to be read again> 
                   (
l.149    (
          "F")
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.149    (
          "F")
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

The letter F
>> Top~Left
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.157          --
                  Top~Right;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.157          --
                  Top~Right;
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.157          --
                  Top~Right;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> BBar~Left
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.162          --
                  farrightof BBar~(Left + bigjut);
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.162          --
                  farrightof BBar~(Left + bigjut);
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.162          --
                  farrightof BBar~(Left + bigjut);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> outline.fatten.rightof.Top~Left
! Isolated expression.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.168             --
                     rightof Bottom~Left
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.168             --
                     rightof Bottom~Left
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> bbcap
! Isolated expression.
<to be read again> 
                   (
l.174    (
          "G")
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.174    (
          "G")
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

The letter G
>> var
! Isolated expression.
<to be read again> 
                   (
l.180    var (
              path) Gpath;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.180    var (
              path) Gpath;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

! Extra tokens will be flushed.
<to be read again> 
                   ~
l.183       = (Top - CCurl)~
                            Right
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> fatcliptwice
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.192          (
                rightof obelow Bottom~Left -- oabove rightof Top~Left)
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.192          (
                rightof obelow Bottom~Left -- oabove rightof Top~Left)
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.192          (
                rightof obelow Bottom~Left -- oabove rightof Top~Left)
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> Top-0.38461BBar-0.30772
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
l.196    draw Gpath;
                    
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
l.196    draw Gpath;
                    
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
l.196    draw Gpath;
                    
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> Bottom+0.38461BBar+0.30772
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ~
l.200       (Bottom + CCurl)~
                             Right
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ~
l.200       (Bottom + CCurl)~
                             Right
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ~
l.200       (Bottom + CCurl)~
                             Right
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> bbcap
! Isolated expression.
<to be read again> 
                   (
l.209    (
          "H")
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.209    (
          "H")
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

The letter H
>> Top~Right
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.217          --
                  Bottom~Right;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.217          --
                  Bottom~Right;
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.217          --
                  Bottom~Right;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> BBar~Left
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.222          --
                  BBar~Right;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.222          --
                  BBar~Right;
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.222          --
                  BBar~Right;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> outline.fatten.rightof.Top~Left
! Isolated expression.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.228             --
                     rightof Bottom~Left
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.228             --
                     rightof Bottom~Left
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> bbcap
! Isolated expression.
<to be read again> 
                   (
l.235    (
          "I")
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.235    (
          "I")
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

The letter I
>> fatten.Top~Middle
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.244             --
                     Bottom~Middle
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.244             --
                     Bottom~Middle
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.244             --
                     Bottom~Middle
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> bbcap
! Isolated expression.
<to be read again> 
                   (
l.251    (
          "J")
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.251    (
          "J")
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

The letter J
>> var
! Isolated expression.
<to be read again> 
                   (
l.257    var (
              path) Jpath;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.257    var (
              path) Jpath;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

! Extra tokens will be flushed.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.261            --
                    (Bottom -+- Top)~Right {down}
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> fatcliponce
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.268          (
                leftof Top~Right -- obelow leftof Bottom~Right)
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.268          (
                leftof Top~Right -- obelow leftof Bottom~Right)
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.268          (
                leftof Top~Right -- obelow leftof Bottom~Right)
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> Top~Right
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
endchar->scantokens.extra_endchar;
                                  if.proofing>0:makebox(proofrule);fi.chardx...
l.274 endchar
             ;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
endchar->scantokens.extra_endchar;
                                  if.proofing>0:makebox(proofrule);fi.chardx...
l.274 endchar
             ;
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
endchar->scantokens.extra_endchar;
                                  if.proofing>0:makebox(proofrule);fi.chardx...
l.274 endchar
             ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(0)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                           ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.274 endchar
             ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(h)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                           ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.274 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(h)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                           ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.274 endchar
             ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
<for(h)> proofrule((0,(EXPR0)),(w,(EXPR0)));
                                             ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.274 endchar
             ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(-d)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.274 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(-d)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.274 endchar
             ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
<for(-d)> proofrule((0,(EXPR0)),(w,(EXPR0)));
                                              ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.274 endchar
             ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(0)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.274 endchar
             ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
<for(0)> ...frule(((EXPR0),-d.o_),((EXPR0),h.o_));
                                                   ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.274 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->special"rule";numspecial.xpart(EXPR0);
                                                 numspecial.ypart(EXPR0);num...
<for(w)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.274 endchar
             ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(w)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.274 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(w)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.274 endchar
             ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
<for(w)> ...frule(((EXPR0),-d.o_),((EXPR0),h.o_));
                                                   ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.274 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Internal quantity `chardx' must receive a known value.
<to be read again> 
                   ;
endchar->...ing>0:makebox(proofrule);fi.chardx:=w;
                                                  shipit;if.displaying>0:mak...
l.274 endchar
             ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

[0]
>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(0)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.274 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(h)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.274 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(h)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.274 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(h)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.274 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(-d)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                             ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.274 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(-d)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                             ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.274 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(-d)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                             ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.274 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(0)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.274 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(0)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.274 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.274 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.274 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.274 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.274 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

! Extra `endgroup'.
endchar->...makebox(screenrule);showit;fi.endgroup
                                                  
l.274 endchar
             ;
I'm not currently working on a `begingroup',
so I had better not try to end anything.

>> bbcap
! Isolated expression.
<to be read again> 
                   (
l.279    (
          "K")
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.279    (
          "K")
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

The letter K
>> %CAPSULE589
>> BBar~Middle-Top~Right
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   ]
l.287    z1 = whatever[Top~Right, BBar~Middle]
                                              ;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (x1,y1)
>> BBar~Middle
! Equation cannot be performed (pair=numeric).
<to be read again> 
                   ;
l.287    z1 = whatever[Top~Right, BBar~Middle];
                                               
I'm sorry, but I don't know how to make such things equal.
(See the two expressions just above the error message.)

>> x1
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.292       z1 --
                  Top~Right;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> y1
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.292       z1 --
                  Top~Right;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> Top~Right
! Undefined coordinates have been replaced by (0,0).
<to be read again> 
                   ;
l.292       z1 -- Top~Right;
                            
I need x and y numbers for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> BBar~Middle
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.297          --
                  Bottom~Right;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.297          --
                  Bottom~Right;
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.297          --
                  Bottom~Right;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> outline.fatten.rightof.Top~Left
! Isolated expression.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.303             --
                     rightof Bottom~Left
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.303             --
                     rightof Bottom~Left
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> bbcap
! Isolated expression.
<to be read again> 
                   (
l.310    (
          "L")
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.310    (
          "L")
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

The letter L
>> Bottom~Left
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.318          --
                  Bottom~Right;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.318          --
                  Bottom~Right;
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.318          --
                  Bottom~Right;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> fatten.rightof.Top~Left
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.324             --
                     rightof Bottom~Left
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.324             --
                     rightof Bottom~Left
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.324             --
                     rightof Bottom~Left
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> bbcap
! Isolated expression.
<to be read again> 
                   (
l.331    (
          "M")
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.331    (
          "M")
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> symmetric
! Isolated expression.
<to be read again> 
                   ;
l.334    symmetric;
                   
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

The letter M
>> fatcliponce
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.342          (
                rightof Bottom~Left -- rightof Top~Left)
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.342          (
                rightof Bottom~Left -- rightof Top~Left)
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.342          (
                rightof Bottom~Left -- rightof Top~Left)
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> Top~Left
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.348          --
                  BBar~Middle
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.348          --
                  BBar~Middle
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.348          --
                  BBar~Middle
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> bbcap
! Isolated expression.
<to be read again> 
                   (
l.357    (
          "N")
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.357    (
          "N")
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

The letter N
>> fatcliponce
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.366          (
                rightof Bottom~Left -- rightof Top~Left)
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.366          (
                rightof Bottom~Left -- rightof Top~Left)
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.366          (
                rightof Bottom~Left -- rightof Top~Left)
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> Top~Left
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.372          --
                  Bottom~Right
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.372          --
                  Bottom~Right
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.372          --
                  Bottom~Right
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> bbcap
! Isolated expression.
<to be read again> 
                   (
l.380    (
          "O")
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.380    (
          "O")
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

The letter O
>> var
! Isolated expression.
<to be read again> 
                   (
l.386    var (
              path) Opath;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.386    var (
              path) Opath;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

! Extra tokens will be flushed.
<to be read again> 
                   ..
l.390            ..
                    Horizon~Left
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> fatcliptwice
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.398          (
                obelow rightof Bottom~Left -- oabove rightof Top~Left)
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.398          (
                obelow rightof Bottom~Left -- oabove rightof Top~Left)
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.398          (
                obelow rightof Bottom~Left -- oabove rightof Top~Left)
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> Thetapath
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
endchar->scantokens.extra_endchar;
                                  if.proofing>0:makebox(proofrule);fi.chardx...
l.404 endchar
             ;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
endchar->scantokens.extra_endchar;
                                  if.proofing>0:makebox(proofrule);fi.chardx...
l.404 endchar
             ;
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
endchar->scantokens.extra_endchar;
                                  if.proofing>0:makebox(proofrule);fi.chardx...
l.404 endchar
             ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(0)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                           ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.404 endchar
             ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(h)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                           ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.404 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(h)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                           ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.404 endchar
             ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
<for(h)> proofrule((0,(EXPR0)),(w,(EXPR0)));
                                             ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.404 endchar
             ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(-d)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.404 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(-d)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.404 endchar
             ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
<for(-d)> proofrule((0,(EXPR0)),(w,(EXPR0)));
                                              ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.404 endchar
             ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(0)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.404 endchar
             ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
<for(0)> ...frule(((EXPR0),-d.o_),((EXPR0),h.o_));
                                                   ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.404 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->special"rule";numspecial.xpart(EXPR0);
                                                 numspecial.ypart(EXPR0);num...
<for(w)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.404 endchar
             ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(w)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.404 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(w)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.404 endchar
             ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
<for(w)> ...frule(((EXPR0),-d.o_),((EXPR0),h.o_));
                                                   ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.404 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Internal quantity `chardx' must receive a known value.
<to be read again> 
                   ;
endchar->...ing>0:makebox(proofrule);fi.chardx:=w;
                                                  shipit;if.displaying>0:mak...
l.404 endchar
             ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

[0]
>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(0)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.404 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(h)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.404 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(h)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.404 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(h)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.404 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(-d)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                             ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.404 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(-d)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                             ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.404 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(-d)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                             ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.404 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(0)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.404 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(0)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.404 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.404 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.404 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.404 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.404 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

! Extra `endgroup'.
endchar->...makebox(screenrule);showit;fi.endgroup
                                                  
l.404 endchar
             ;
I'm not currently working on a `begingroup',
so I had better not try to end anything.

>> bbcap
! Isolated expression.
<to be read again> 
                   (
l.409    (
          "P")
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.409    (
          "P")
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

The letter P
>> Top~Left
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.417          --
                  Top~Middle {right}
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.417          --
                  Top~Middle {right}
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.417          --
                  Top~Middle {right}
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> outline.fatten.rightof.Top~Left
! Isolated expression.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.426             --
                     rightof Bottom~Left
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.426             --
                     rightof Bottom~Left
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> bbchar
! Isolated expression.
<to be read again> 
                   (
l.433    (
          "Q")
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.433    (
          "Q")
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

The letter Q
>> var
! Isolated expression.
<to be read again> 
                   (
l.440    var (
              path) Qpath;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.440    var (
              path) Qpath;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

! Extra tokens will be flushed.
<to be read again> 
                   ..
l.444            ..
                    (Top -+- aBottom)~Left
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> fatcliptwice
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.452          (
                obelow rightof Bottom~Left -- oabove rightof Top~Left)
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.452          (
                obelow rightof Bottom~Left -- oabove rightof Top~Left)
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.452          (
                obelow rightof Bottom~Left -- oabove rightof Top~Left)
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> Thetapath
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
l.456    draw Qpath;
                    
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
l.456    draw Qpath;
                    
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
l.456    draw Qpath;
                    
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> QTailTop~Middle
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.461          --
                  QTailBottom~Right
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.461          --
                  QTailBottom~Right
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.461          --
                  QTailBottom~Right
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> bbcap
! Isolated expression.
<to be read again> 
                   (
l.469    (
          "R")
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.469    (
          "R")
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

The letter R
>> Top~Left
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.477          --
                  Top~Middle {right}
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.477          --
                  Top~Middle {right}
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.477          --
                  Top~Middle {right}
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> outline.fatten.rightof.Top~Left
! Isolated expression.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.486             --
                     rightof Bottom~Left;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.486             --
                     rightof Bottom~Left;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> BBar~Middle
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.491          --
                  Bottom~Right
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.491          --
                  Bottom~Right
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.491          --
                  Bottom~Right
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> bbcap
! Isolated expression.
<to be read again> 
                   (
l.498    (
          "S")
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.498    (
          "S")
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

The letter S
>> var
! Isolated expression.
<to be read again> 
                   (
l.504    var (
              path) Spath;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.504    var (
              path) Spath;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

! Extra tokens will be flushed.
<to be read again> 
                   ~
l.507       = (Top - CCurl)~
                            Right
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> fatcliptwice
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.518          (
                oabove rightof Top~Left -- rightof BBar~Left)
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.518          (
                oabove rightof Top~Left -- rightof BBar~Left)
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.518          (
                oabove rightof Top~Left -- rightof BBar~Left)
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> Top-0.38461BBar-0.30772
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
endchar->scantokens.extra_endchar;
                                  if.proofing>0:makebox(proofrule);fi.chardx...
l.524 endchar
             ;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
endchar->scantokens.extra_endchar;
                                  if.proofing>0:makebox(proofrule);fi.chardx...
l.524 endchar
             ;
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
endchar->scantokens.extra_endchar;
                                  if.proofing>0:makebox(proofrule);fi.chardx...
l.524 endchar
             ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(0)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                           ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.524 endchar
             ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(h)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                           ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.524 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(h)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                           ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.524 endchar
             ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
<for(h)> proofrule((0,(EXPR0)),(w,(EXPR0)));
                                             ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.524 endchar
             ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(-d)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.524 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(-d)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.524 endchar
             ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
<for(-d)> proofrule((0,(EXPR0)),(w,(EXPR0)));
                                              ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.524 endchar
             ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(0)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.524 endchar
             ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
<for(0)> ...frule(((EXPR0),-d.o_),((EXPR0),h.o_));
                                                   ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.524 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->special"rule";numspecial.xpart(EXPR0);
                                                 numspecial.ypart(EXPR0);num...
<for(w)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.524 endchar
             ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(w)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.524 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(w)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.524 endchar
             ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
<for(w)> ...frule(((EXPR0),-d.o_),((EXPR0),h.o_));
                                                   ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.524 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Internal quantity `chardx' must receive a known value.
<to be read again> 
                   ;
endchar->...ing>0:makebox(proofrule);fi.chardx:=w;
                                                  shipit;if.displaying>0:mak...
l.524 endchar
             ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

[0]
>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(0)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.524 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(h)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.524 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(h)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.524 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(h)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.524 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(-d)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                             ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.524 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(-d)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                             ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.524 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(-d)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                             ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.524 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(0)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.524 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(0)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.524 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.524 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.524 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.524 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.524 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

! Extra `endgroup'.
endchar->...makebox(screenrule);showit;fi.endgroup
                                                  
l.524 endchar
             ;
I'm not currently working on a `begingroup',
so I had better not try to end anything.

>> bbcap
! Isolated expression.
<to be read again> 
                   (
l.529    (
          "T")
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.529    (
          "T")
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> fatsymmetric
! Isolated expression.
<to be read again> 
                   ;
l.532    fatsymmetric;
                      
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

The letter T
>> Top~Left
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.539          --
                  Top~Right;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.539          --
                  Top~Right;
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.539          --
                  Top~Right;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> fatten.Top~Middle
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.545             --
                     Bottom~Middle
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.545             --
                     Bottom~Middle
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.545             --
                     Bottom~Middle
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> bbcap
! Isolated expression.
<to be read again> 
                   (
l.552    (
          "U")
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.552    (
          "U")
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

The letter U
>> var
! Isolated expression.
<to be read again> 
                   (
l.558    var (
              path) Upath;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.558    var (
              path) Upath;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

! Extra tokens will be flushed.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.562           --
                   Horizon~Left {down}
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> fatcliponce
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.570          (
                rightof Top~Left -- obelow rightof Bottom~Left)
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.570          (
                rightof Top~Left -- obelow rightof Bottom~Left)
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.570          (
                rightof Top~Left -- obelow rightof Bottom~Left)
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> Top~Left
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
endchar->scantokens.extra_endchar;
                                  if.proofing>0:makebox(proofrule);fi.chardx...
l.576 endchar
             ;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
endchar->scantokens.extra_endchar;
                                  if.proofing>0:makebox(proofrule);fi.chardx...
l.576 endchar
             ;
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
endchar->scantokens.extra_endchar;
                                  if.proofing>0:makebox(proofrule);fi.chardx...
l.576 endchar
             ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(0)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                           ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.576 endchar
             ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(h)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                           ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.576 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(h)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                           ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.576 endchar
             ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
<for(h)> proofrule((0,(EXPR0)),(w,(EXPR0)));
                                             ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.576 endchar
             ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(-d)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.576 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(-d)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.576 endchar
             ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
<for(-d)> proofrule((0,(EXPR0)),(w,(EXPR0)));
                                              ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.576 endchar
             ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(0)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.576 endchar
             ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
<for(0)> ...frule(((EXPR0),-d.o_),((EXPR0),h.o_));
                                                   ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.576 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->special"rule";numspecial.xpart(EXPR0);
                                                 numspecial.ypart(EXPR0);num...
<for(w)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.576 endchar
             ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(w)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.576 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(w)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.576 endchar
             ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
<for(w)> ...frule(((EXPR0),-d.o_),((EXPR0),h.o_));
                                                   ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.576 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Internal quantity `chardx' must receive a known value.
<to be read again> 
                   ;
endchar->...ing>0:makebox(proofrule);fi.chardx:=w;
                                                  shipit;if.displaying>0:mak...
l.576 endchar
             ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

[0]
>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(0)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.576 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(h)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.576 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(h)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.576 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(h)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.576 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(-d)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                             ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.576 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(-d)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                             ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.576 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(-d)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                             ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.576 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(0)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.576 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(0)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.576 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.576 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.576 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.576 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.576 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

! Extra `endgroup'.
endchar->...makebox(screenrule);showit;fi.endgroup
                                                  
l.576 endchar
             ;
I'm not currently working on a `begingroup',
so I had better not try to end anything.

>> bbcap
! Isolated expression.
<to be read again> 
                   (
l.581    (
          "V")
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.581    (
          "V")
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> symmetric
! Isolated expression.
<to be read again> 
                   ;
l.584    symmetric;
                   
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

The letter V
>> fatcliponce
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.591          (
                rightof Top~Left -- rightof Bottom~Middle)
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.591          (
                rightof Top~Left -- rightof Bottom~Middle)
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.591          (
                rightof Top~Left -- rightof Bottom~Middle)
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> Bottom~Middle
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.597          --
                  Top~Right
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.597          --
                  Top~Right
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.597          --
                  Top~Right
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> bbcap
! Isolated expression.
<to be read again> 
                   (
l.604    (
          "W")
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.604    (
          "W")
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> symmetric
! Isolated expression.
<to be read again> 
                   ;
l.607    symmetric;
                   
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

The letter W
>> fatcliponce
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.614          (
                rightof Top~Left -- rightof Bottom~(Left -+- Middle))
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.614          (
                rightof Top~Left -- rightof Bottom~(Left -+- Middle))
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.614          (
                rightof Top~Left -- rightof Bottom~(Left -+- Middle))
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> Bottom~
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.619       Bottom~(
                    Left -+- Middle)
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.619       Bottom~(
                    Left -+- Middle)
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.619       Bottom~(
                    Left -+- Middle)
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> bbcap
! Isolated expression.
<to be read again> 
                   (
l.629    (
          "X")
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.629    (
          "X")
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

The letter X
>> Top~Left
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.637          --
                  Bottom~Right;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.637          --
                  Bottom~Right;
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.637          --
                  Bottom~Right;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> outline.fatten.leftof.Top~Right
! Isolated expression.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.643             --
                     rightof Bottom~Left
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.643             --
                     rightof Bottom~Left
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> bbcap
! Isolated expression.
<to be read again> 
                   (
l.650    (
          "Y")
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.650    (
          "Y")
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> fatsymmetric
! Isolated expression.
<to be read again> 
                   ;
l.653    fatsymmetric;
                      
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

The letter Y
>> fatten.rightof.Top~Left
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.661             --
                     BBar~Middle
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.661             --
                     BBar~Middle
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.661             --
                     BBar~Middle
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> rightof.BBar~Middle
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.667          --
                  Top~Right
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.667          --
                  Top~Right
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.667          --
                  Top~Right
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> bbcap
! Isolated expression.
<to be read again> 
                   (
l.674    (
          "Z")
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.674    (
          "Z")
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

The letter Z
>> Top~Left
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.682          --
                  Top~Right;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.682          --
                  Top~Right;
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.682          --
                  Top~Right;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> fatten.leftof.Top~Right
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.688             --
                     rightof Bottom~Left;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.688             --
                     rightof Bottom~Left;
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.688             --
                     rightof Bottom~Left;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> Bottom~Left
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.693          --
                  Bottom~Right
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.693          --
                  Bottom~Right
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.693          --
                  Bottom~Right
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

) (/usr/share/texmf/fonts/source/public/bbold/bblower.mf
>> bbchar
! Isolated expression.
<to be read again> 
                   (
l.6    (
        "a")
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.6    (
        "a")
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

The letter a
>> var
! Isolated expression.
<to be read again> 
                   (
l.13    var (
             path) apath;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.13    var (
             path) apath;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

! Extra tokens will be flushed.
<to be read again> 
                   ~
l.16       = (Top - cCurl)~
                           Right
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> fatcliptwice
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.25          (
               oabove rightof Top~Left -- obelow rightof Bottom~Left)
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.25          (
               oabove rightof Top~Left -- obelow rightof Bottom~Left)
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.25          (
               oabove rightof Top~Left -- obelow rightof Bottom~Left)
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> Top-0.2sixBowl-0.39998
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
l.29    draw apath;
                   
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
l.29    draw apath;
                   
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
l.29    draw apath;
                   
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> Top~Right
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.34          --
                 Bottom~Right;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.34          --
                 Bottom~Right;
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.34          --
                 Bottom~Right;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(0)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                           ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.36 endchar
            ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(h)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                           ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.36 endchar
            ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(h)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                           ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.36 endchar
            ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
<for(h)> proofrule((0,(EXPR0)),(w,(EXPR0)));
                                             ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.36 endchar
            ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(-d)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.36 endchar
            ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(-d)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.36 endchar
            ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
<for(-d)> proofrule((0,(EXPR0)),(w,(EXPR0)));
                                              ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.36 endchar
            ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(0)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.36 endchar
            ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
<for(0)> ...frule(((EXPR0),-d.o_),((EXPR0),h.o_));
                                                   ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.36 endchar
            ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->special"rule";numspecial.xpart(EXPR0);
                                                 numspecial.ypart(EXPR0);num...
<for(w)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.36 endchar
            ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(w)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.36 endchar
            ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(w)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.36 endchar
            ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
<for(w)> ...frule(((EXPR0),-d.o_),((EXPR0),h.o_));
                                                   ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.36 endchar
            ;
The expression shown above has the wrong type to be output.

>> w
! Internal quantity `chardx' must receive a known value.
<to be read again> 
                   ;
endchar->...ing>0:makebox(proofrule);fi.chardx:=w;
                                                  shipit;if.displaying>0:mak...
l.36 endchar
            ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

[0]
>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(0)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.36 endchar
            ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(h)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.36 endchar
            ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(h)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.36 endchar
            ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(h)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.36 endchar
            ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(-d)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                             ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.36 endchar
            ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(-d)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                             ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.36 endchar
            ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(-d)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                             ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.36 endchar
            ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(0)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.36 endchar
            ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(0)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.36 endchar
            ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.36 endchar
            ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.36 endchar
            ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.36 endchar
            ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.36 endchar
            ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

! Extra `endgroup'.
endchar->...makebox(screenrule);showit;fi.endgroup
                                                  
l.36 endchar
            ;
I'm not currently working on a `begingroup',
so I had better not try to end anything.

>> bbchar
! Isolated expression.
<to be read again> 
                   (
l.41    (
         "b")
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.41    (
         "b")
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

The letter b
>> farrightof
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.49       farrightof (
                       aTop - cCurl)~Left
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.49       farrightof (
                       aTop - cCurl)~Left
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.49       farrightof (
                       aTop - cCurl)~Left
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> fatten.rightof.Bottom~Left
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.59             --
                    rightof Top~Left;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.59             --
                    rightof Top~Left;
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.59             --
                    rightof Top~Left;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(0)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                           ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.61 endchar
            ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(h)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                           ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.61 endchar
            ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(h)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                           ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.61 endchar
            ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
<for(h)> proofrule((0,(EXPR0)),(w,(EXPR0)));
                                             ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.61 endchar
            ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(-d)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.61 endchar
            ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(-d)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.61 endchar
            ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
<for(-d)> proofrule((0,(EXPR0)),(w,(EXPR0)));
                                              ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.61 endchar
            ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(0)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.61 endchar
            ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
<for(0)> ...frule(((EXPR0),-d.o_),((EXPR0),h.o_));
                                                   ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.61 endchar
            ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->special"rule";numspecial.xpart(EXPR0);
                                                 numspecial.ypart(EXPR0);num...
<for(w)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.61 endchar
            ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(w)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.61 endchar
            ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(w)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.61 endchar
            ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
<for(w)> ...frule(((EXPR0),-d.o_),((EXPR0),h.o_));
                                                   ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.61 endchar
            ;
The expression shown above has the wrong type to be output.

>> w
! Internal quantity `chardx' must receive a known value.
<to be read again> 
                   ;
endchar->...ing>0:makebox(proofrule);fi.chardx:=w;
                                                  shipit;if.displaying>0:mak...
l.61 endchar
            ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

[0]
>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(0)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.61 endchar
            ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(h)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.61 endchar
            ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(h)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.61 endchar
            ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(h)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.61 endchar
            ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(-d)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                             ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.61 endchar
            ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(-d)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                             ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.61 endchar
            ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(-d)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                             ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.61 endchar
            ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(0)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.61 endchar
            ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(0)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.61 endchar
            ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.61 endchar
            ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.61 endchar
            ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.61 endchar
            ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.61 endchar
            ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

! Extra `endgroup'.
endchar->...makebox(screenrule);showit;fi.endgroup
                                                  
l.61 endchar
            ;
I'm not currently working on a `begingroup',
so I had better not try to end anything.

>> bbchar
! Isolated expression.
<to be read again> 
                   (
l.66    (
         "c")
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.66    (
         "c")
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

The letter c
>> var
! Isolated expression.
<to be read again> 
                   (
l.73    var (
             path) cpath;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.73    var (
             path) cpath;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

! Extra tokens will be flushed.
<to be read again> 
                   ~
l.76       = (Top - cCurl)~
                           Right
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> fatcliptwice
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.85          (
               oabove rightof Top~Left -- obelow rightof Bottom~Left)
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.85          (
               oabove rightof Top~Left -- obelow rightof Bottom~Left)
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.85          (
               oabove rightof Top~Left -- obelow rightof Bottom~Left)
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> Top-0.2sixBowl-0.39998
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
endchar->scantokens.extra_endchar;
                                  if.proofing>0:makebox(proofrule);fi.chardx...
l.91 endchar
            ;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
endchar->scantokens.extra_endchar;
                                  if.proofing>0:makebox(proofrule);fi.chardx...
l.91 endchar
            ;
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
endchar->scantokens.extra_endchar;
                                  if.proofing>0:makebox(proofrule);fi.chardx...
l.91 endchar
            ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(0)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                           ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.91 endchar
            ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(h)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                           ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.91 endchar
            ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(h)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                           ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.91 endchar
            ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
<for(h)> proofrule((0,(EXPR0)),(w,(EXPR0)));
                                             ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.91 endchar
            ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(-d)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.91 endchar
            ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(-d)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.91 endchar
            ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
<for(-d)> proofrule((0,(EXPR0)),(w,(EXPR0)));
                                              ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.91 endchar
            ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(0)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.91 endchar
            ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
<for(0)> ...frule(((EXPR0),-d.o_),((EXPR0),h.o_));
                                                   ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.91 endchar
            ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->special"rule";numspecial.xpart(EXPR0);
                                                 numspecial.ypart(EXPR0);num...
<for(w)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.91 endchar
            ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(w)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.91 endchar
            ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(w)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.91 endchar
            ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
<for(w)> ...frule(((EXPR0),-d.o_),((EXPR0),h.o_));
                                                   ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.91 endchar
            ;
The expression shown above has the wrong type to be output.

>> w
! Internal quantity `chardx' must receive a known value.
<to be read again> 
                   ;
endchar->...ing>0:makebox(proofrule);fi.chardx:=w;
                                                  shipit;if.displaying>0:mak...
l.91 endchar
            ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

[0]
>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(0)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.91 endchar
            ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(h)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.91 endchar
            ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(h)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.91 endchar
            ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(h)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.91 endchar
            ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(-d)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                             ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.91 endchar
            ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(-d)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                             ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.91 endchar
            ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(-d)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                             ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.91 endchar
            ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(0)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.91 endchar
            ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(0)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.91 endchar
            ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.91 endchar
            ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.91 endchar
            ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.91 endchar
            ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.91 endchar
            ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

! Extra `endgroup'.
endchar->...makebox(screenrule);showit;fi.endgroup
                                                  
l.91 endchar
            ;
I'm not currently working on a `begingroup',
so I had better not try to end anything.

>> bbchar
! Isolated expression.
<to be read again> 
                   (
l.96    (
         "d")
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.96    (
         "d")
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

The letter d
>> var
! Isolated expression.
<to be read again> 
                   (
l.103    var (
              path) dpath;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.103    var (
              path) dpath;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

! Extra tokens will be flushed.
<to be read again> 
                   ~
l.106       = (aTop - cCurl)~
                             Right
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> fatcliptwice
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.115          (
                oabove rightof aTop~Left -- obelow rightof Bottom~Left)
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.115          (
                oabove rightof aTop~Left -- obelow rightof Bottom~Left)
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.115          (
                oabove rightof aTop~Left -- obelow rightof Bottom~Left)
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> aTop-0.2sixBowl-0.39998
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
l.119    draw dpath;
                    
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
l.119    draw dpath;
                    
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
l.119    draw dpath;
                    
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> Bottom~Right
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.124          --
                  Top~Right
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.124          --
                  Top~Right
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.124          --
                  Top~Right
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> bbchar
! Isolated expression.
<to be read again> 
                   (
l.131    (
          "e")
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.131    (
          "e")
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

The letter e
>> var
! Isolated expression.
<to be read again> 
                   (
l.138    var (
              path) epath;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.138    var (
              path) epath;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

! Extra tokens will be flushed.
<to be read again> 
                   ..
l.142            ..
                    oabove Top~Middle {left}
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> farrightof.eBar~Left
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.150          --
                  eBar~Right;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.150          --
                  eBar~Right;
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.150          --
                  eBar~Right;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> outline.fatcliptwice
! Isolated expression.
<to be read again> 
                   (
l.155          (
                oabove rightof Top~Left -- obelow rightof Bottom~Left)
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.155          (
                oabove rightof Top~Left -- obelow rightof Bottom~Left)
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> epath
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
l.159    draw epath;
                    
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
l.159    draw epath;
                    
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
l.159    draw epath;
                    
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(0)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                           ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.161 endchar
             ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(h)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                           ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.161 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(h)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                           ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.161 endchar
             ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
<for(h)> proofrule((0,(EXPR0)),(w,(EXPR0)));
                                             ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.161 endchar
             ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(-d)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.161 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(-d)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.161 endchar
             ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
<for(-d)> proofrule((0,(EXPR0)),(w,(EXPR0)));
                                              ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.161 endchar
             ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(0)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.161 endchar
             ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
<for(0)> ...frule(((EXPR0),-d.o_),((EXPR0),h.o_));
                                                   ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.161 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->special"rule";numspecial.xpart(EXPR0);
                                                 numspecial.ypart(EXPR0);num...
<for(w)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.161 endchar
             ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(w)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.161 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(w)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.161 endchar
             ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
<for(w)> ...frule(((EXPR0),-d.o_),((EXPR0),h.o_));
                                                   ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.161 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Internal quantity `chardx' must receive a known value.
<to be read again> 
                   ;
endchar->...ing>0:makebox(proofrule);fi.chardx:=w;
                                                  shipit;if.displaying>0:mak...
l.161 endchar
             ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

[0]
>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(0)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.161 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(h)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.161 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(h)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.161 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(h)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.161 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(-d)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                             ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.161 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(-d)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                             ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.161 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(-d)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                             ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.161 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(0)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.161 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(0)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.161 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.161 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.161 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.161 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.161 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

! Extra `endgroup'.
endchar->...makebox(screenrule);showit;fi.endgroup
                                                  
l.161 endchar
             ;
I'm not currently working on a `begingroup',
so I had better not try to end anything.

>> bbchar
! Isolated expression.
<to be read again> 
                   (
l.166    (
          "f")
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.166    (
          "f")
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

The letter f
>> var
! Isolated expression.
<to be read again> 
                   (
l.173    var (
              path) fpath;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.173    var (
              path) fpath;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

! Extra tokens will be flushed.
<to be read again> 
                   ~
l.176       = (Top - hCurl)~
                            Left {up}
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> aTop~Left
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.183          --
                  farrightof aTop~(Left + jut);
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.183          --
                  farrightof aTop~(Left + jut);
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.183          --
                  farrightof aTop~(Left + jut);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> outline.fatcliponce
! Isolated expression.
<to be read again> 
                   (
l.188          (
                rightof Bottom~Left -- oabove rightof Top~Left)
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.188          (
                rightof Bottom~Left -- oabove rightof Top~Left)
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> Top-0.4sixBowl-0.29965
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
endchar->scantokens.extra_endchar;
                                  if.proofing>0:makebox(proofrule);fi.chardx...
l.194 endchar
             ;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
endchar->scantokens.extra_endchar;
                                  if.proofing>0:makebox(proofrule);fi.chardx...
l.194 endchar
             ;
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
endchar->scantokens.extra_endchar;
                                  if.proofing>0:makebox(proofrule);fi.chardx...
l.194 endchar
             ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(0)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                           ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.194 endchar
             ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(h)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                           ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.194 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(h)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                           ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.194 endchar
             ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
<for(h)> proofrule((0,(EXPR0)),(w,(EXPR0)));
                                             ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.194 endchar
             ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(-d)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.194 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(-d)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.194 endchar
             ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
<for(-d)> proofrule((0,(EXPR0)),(w,(EXPR0)));
                                              ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.194 endchar
             ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(0)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.194 endchar
             ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
<for(0)> ...frule(((EXPR0),-d.o_),((EXPR0),h.o_));
                                                   ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.194 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->special"rule";numspecial.xpart(EXPR0);
                                                 numspecial.ypart(EXPR0);num...
<for(w)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.194 endchar
             ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(w)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.194 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(w)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.194 endchar
             ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
<for(w)> ...frule(((EXPR0),-d.o_),((EXPR0),h.o_));
                                                   ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.194 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Internal quantity `chardx' must receive a known value.
<to be read again> 
                   ;
endchar->...ing>0:makebox(proofrule);fi.chardx:=w;
                                                  shipit;if.displaying>0:mak...
l.194 endchar
             ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

[0]
>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(0)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.194 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(h)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.194 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(h)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.194 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(h)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.194 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(-d)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                             ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.194 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(-d)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                             ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.194 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(-d)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                             ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.194 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(0)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.194 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(0)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.194 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.194 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.194 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.194 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.194 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

! Extra `endgroup'.
endchar->...makebox(screenrule);showit;fi.endgroup
                                                  
l.194 endchar
             ;
I'm not currently working on a `begingroup',
so I had better not try to end anything.

>> bbchar
! Isolated expression.
<to be read again> 
                   (
l.199    (
          "g")
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.199    (
          "g")
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

The letter g
>> var
! Isolated expression.
<to be read again> 
                   (
l.206    var (
              path) gpath;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.206    var (
              path) gpath;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

! Extra tokens will be flushed.
<to be read again> 
                   ~
l.209       = (Top - cCurl)~
                            Right
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> fatcliptwice
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.218          (
                obelow rightof aBottom~Left -- oabove rightof Top~Left)
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.218          (
                obelow rightof aBottom~Left -- oabove rightof Top~Left)
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.218          (
                obelow rightof aBottom~Left -- oabove rightof Top~Left)
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> Top-0.2sixBowl-0.39998
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
l.222    draw gpath;
                    
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
l.222    draw gpath;
                    
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
l.222    draw gpath;
                    
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> Top~Right
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ..
---->..
       tension.infinity..
l.227         ---
                  aBottom~Right
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ..
---->..
       tension.infinity..
l.227         ---
                  aBottom~Right
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ..
---->..
       tension.infinity..
l.227         ---
                  aBottom~Right
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> bbchar
! Isolated expression.
<to be read again> 
                   (
l.236    (
          "h")
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.236    (
          "h")
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

The letter h
>> farrightof
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.244       farrightof (
                        aTop - cCurl)~Left
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.244       farrightof (
                        aTop - cCurl)~Left
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.244       farrightof (
                        aTop - cCurl)~Left
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> fatten.rightof.Bottom~Left
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.253             --
                     rightof Top~Left
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.253             --
                     rightof Top~Left
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.253             --
                     rightof Top~Left
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> bbchar
! Isolated expression.
<to be read again> 
                   (
l.260    (
          "i")
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.260    (
          "i")
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> fatsymmetric
! Isolated expression.
<to be read again> 
                   ;
l.264    fatsymmetric;
                      
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

The letter i
>> fatten.Bottom~Middle
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.272             --
                     aTop~Middle;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.272             --
                     aTop~Middle;
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.272             --
                     aTop~Middle;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> splodge.below.Top~Middle
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
endchar->scantokens.extra_endchar;
                                  if.proofing>0:makebox(proofrule);fi.chardx...
l.279 endchar
             ;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
endchar->scantokens.extra_endchar;
                                  if.proofing>0:makebox(proofrule);fi.chardx...
l.279 endchar
             ;
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
endchar->scantokens.extra_endchar;
                                  if.proofing>0:makebox(proofrule);fi.chardx...
l.279 endchar
             ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(0)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                           ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.279 endchar
             ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(h)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                           ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.279 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(h)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                           ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.279 endchar
             ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
<for(h)> proofrule((0,(EXPR0)),(w,(EXPR0)));
                                             ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.279 endchar
             ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(-d)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.279 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(-d)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.279 endchar
             ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
<for(-d)> proofrule((0,(EXPR0)),(w,(EXPR0)));
                                              ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.279 endchar
             ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(0)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.279 endchar
             ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
<for(0)> ...frule(((EXPR0),-d.o_),((EXPR0),h.o_));
                                                   ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.279 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->special"rule";numspecial.xpart(EXPR0);
                                                 numspecial.ypart(EXPR0);num...
<for(w)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.279 endchar
             ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(w)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.279 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(w)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.279 endchar
             ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
<for(w)> ...frule(((EXPR0),-d.o_),((EXPR0),h.o_));
                                                   ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.279 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Internal quantity `chardx' must receive a known value.
<to be read again> 
                   ;
endchar->...ing>0:makebox(proofrule);fi.chardx:=w;
                                                  shipit;if.displaying>0:mak...
l.279 endchar
             ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

[0]
>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(0)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.279 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(h)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.279 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(h)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.279 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(h)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.279 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(-d)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                             ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.279 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(-d)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                             ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.279 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(-d)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                             ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.279 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(0)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.279 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(0)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.279 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.279 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.279 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.279 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.279 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

! Extra `endgroup'.
endchar->...makebox(screenrule);showit;fi.endgroup
                                                  
l.279 endchar
             ;
I'm not currently working on a `begingroup',
so I had better not try to end anything.

>> bbchar
! Isolated expression.
<to be read again> 
                   (
l.284    (
          "j")
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.284    (
          "j")
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

The letter j
>> var
! Isolated expression.
<to be read again> 
                   (
l.291    var (
              path) jpath;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.291    var (
              path) jpath;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

! Extra tokens will be flushed.
<to be read again> 
                   ..
---->..
       tension.infinity..
l.295           ---
                    aBottom~Right
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> fatcliponce
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.302          (
                leftof aTop~Right -- obelow leftof Bottom~Right)
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.302          (
                leftof aTop~Right -- obelow leftof Bottom~Right)
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.302          (
                leftof aTop~Right -- obelow leftof Bottom~Right)
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> jpath
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
l.306    draw jpath;
                    
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
l.306    draw jpath;
                    
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
l.306    draw jpath;
                    
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> splodge.below.leftof.Top~Right
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
endchar->scantokens.extra_endchar;
                                  if.proofing>0:makebox(proofrule);fi.chardx...
l.313 endchar
             ;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
endchar->scantokens.extra_endchar;
                                  if.proofing>0:makebox(proofrule);fi.chardx...
l.313 endchar
             ;
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
endchar->scantokens.extra_endchar;
                                  if.proofing>0:makebox(proofrule);fi.chardx...
l.313 endchar
             ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(0)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                           ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.313 endchar
             ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(h)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                           ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.313 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(h)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                           ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.313 endchar
             ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
<for(h)> proofrule((0,(EXPR0)),(w,(EXPR0)));
                                             ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.313 endchar
             ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(-d)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.313 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(-d)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.313 endchar
             ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
<for(-d)> proofrule((0,(EXPR0)),(w,(EXPR0)));
                                              ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.313 endchar
             ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(0)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.313 endchar
             ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
<for(0)> ...frule(((EXPR0),-d.o_),((EXPR0),h.o_));
                                                   ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.313 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->special"rule";numspecial.xpart(EXPR0);
                                                 numspecial.ypart(EXPR0);num...
<for(w)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.313 endchar
             ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(w)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.313 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(w)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.313 endchar
             ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
<for(w)> ...frule(((EXPR0),-d.o_),((EXPR0),h.o_));
                                                   ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.313 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Internal quantity `chardx' must receive a known value.
<to be read again> 
                   ;
endchar->...ing>0:makebox(proofrule);fi.chardx:=w;
                                                  shipit;if.displaying>0:mak...
l.313 endchar
             ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

[0]
>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(0)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.313 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(h)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.313 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(h)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.313 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(h)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.313 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(-d)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                             ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.313 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(-d)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                             ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.313 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(-d)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                             ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.313 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(0)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.313 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(0)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.313 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.313 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.313 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.313 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.313 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

! Extra `endgroup'.
endchar->...makebox(screenrule);showit;fi.endgroup
                                                  
l.313 endchar
             ;
I'm not currently working on a `begingroup',
so I had better not try to end anything.

>> bbchar
! Isolated expression.
<to be read again> 
                   (
l.318    (
          "k")
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.318    (
          "k")
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

The letter k
>> %CAPSULE6686
>> -jpath+eBar~Middle
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   ]
l.327    z1 = whatever[aTop~Right, eBar~Middle]
                                               ;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (x1,y1)
>> eBar~Middle
! Equation cannot be performed (pair=numeric).
<to be read again> 
                   ;
l.327    z1 = whatever[aTop~Right, eBar~Middle];
                                                
I'm sorry, but I don't know how to make such things equal.
(See the two expressions just above the error message.)

! Redundant equation.
<to be read again> 
                   ;
l.328    x1 = Left;
                   
I already knew that this equation was true.
But perhaps no harm has been done; let's continue.

>> x1
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.332       z1 --
                  aTop~Right;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> y1
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.332       z1 --
                  aTop~Right;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> jpath
! Undefined coordinates have been replaced by (0,0).
<to be read again> 
                   ;
l.332       z1 -- aTop~Right;
                             
I need x and y numbers for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> eBar~Middle
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.337          --
                  Bottom~Right;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.337          --
                  Bottom~Right;
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.337          --
                  Bottom~Right;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> outline.fatten.rightof.Top~Left
! Isolated expression.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.343             --
                     rightof Bottom~Left
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.343             --
                     rightof Bottom~Left
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> bbchar
! Isolated expression.
<to be read again> 
                   (
l.350    (
          "l")
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.350    (
          "l")
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

The letter l
>> fatcliponce
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.360          (
                Top~Middle -- Bottom~Middle)
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.360          (
                Top~Middle -- Bottom~Middle)
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.360          (
                Top~Middle -- Bottom~Middle)
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> bbchar
! Isolated expression.
<to be read again> 
                   (
l.370    (
          "m")
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.370    (
          "m")
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> symmetric
! Isolated expression.
<to be read again> 
                   ;
l.374    symmetric;
                   
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

The letter m
>> fatten.rightof.Bottom~Left
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.382             --
                     rightof Top~Left;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.382             --
                     rightof Top~Left;
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.382             --
                     rightof Top~Left;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> farrightof
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.386       farrightof (
                        Top - cCurl)~Left
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.386       farrightof (
                        Top - cCurl)~Left
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.386       farrightof (
                        Top - cCurl)~Left
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> rightof
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.393       rightof (
                     Top - hCurl)~Middle {up}
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.393       rightof (
                     Top - hCurl)~Middle {up}
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.393       rightof (
                     Top - hCurl)~Middle {up}
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> bbchar
! Isolated expression.
<to be read again> 
                   (
l.403    (
          "n")
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.403    (
          "n")
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

The letter n
>> fatten.rightof.Bottom~Left
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.413             --
                     rightof Top~Left;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.413             --
                     rightof Top~Left;
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.413             --
                     rightof Top~Left;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> farrightof
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.417       farrightof (
                        Top - cCurl)~Left
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.417       farrightof (
                        Top - cCurl)~Left
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.417       farrightof (
                        Top - cCurl)~Left
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(0)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                           ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.422 endchar
             ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(h)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                           ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.422 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(h)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                           ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.422 endchar
             ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
<for(h)> proofrule((0,(EXPR0)),(w,(EXPR0)));
                                             ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.422 endchar
             ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(-d)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.422 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(-d)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.422 endchar
             ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
<for(-d)> proofrule((0,(EXPR0)),(w,(EXPR0)));
                                              ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.422 endchar
             ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(0)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.422 endchar
             ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
<for(0)> ...frule(((EXPR0),-d.o_),((EXPR0),h.o_));
                                                   ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.422 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->special"rule";numspecial.xpart(EXPR0);
                                                 numspecial.ypart(EXPR0);num...
<for(w)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.422 endchar
             ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(w)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.422 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(w)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.422 endchar
             ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
<for(w)> ...frule(((EXPR0),-d.o_),((EXPR0),h.o_));
                                                   ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.422 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Internal quantity `chardx' must receive a known value.
<to be read again> 
                   ;
endchar->...ing>0:makebox(proofrule);fi.chardx:=w;
                                                  shipit;if.displaying>0:mak...
l.422 endchar
             ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

[0]
>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(0)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.422 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(h)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.422 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(h)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.422 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(h)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.422 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(-d)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                             ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.422 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(-d)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                             ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.422 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(-d)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                             ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.422 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(0)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.422 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(0)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.422 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.422 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.422 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.422 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.422 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

! Extra `endgroup'.
endchar->...makebox(screenrule);showit;fi.endgroup
                                                  
l.422 endchar
             ;
I'm not currently working on a `begingroup',
so I had better not try to end anything.

>> bbchar
! Isolated expression.
<to be read again> 
                   (
l.427    (
          "o")
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.427    (
          "o")
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

The letter o
>> var
! Isolated expression.
<to be read again> 
                   (
l.434    var (
              path) opath;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.434    var (
              path) opath;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

! Extra tokens will be flushed.
<to be read again> 
                   {
l.437       = oabove Top~Middle {
                                 right}
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> fatcliptwice
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.446          (
                obelow rightof Bottom~Left -- oabove rightof Top~Left)
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.446          (
                obelow rightof Bottom~Left -- oabove rightof Top~Left)
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.446          (
                obelow rightof Bottom~Left -- oabove rightof Top~Left)
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> Thetapath
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
endchar->scantokens.extra_endchar;
                                  if.proofing>0:makebox(proofrule);fi.chardx...
l.452 endchar
             ;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
endchar->scantokens.extra_endchar;
                                  if.proofing>0:makebox(proofrule);fi.chardx...
l.452 endchar
             ;
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
endchar->scantokens.extra_endchar;
                                  if.proofing>0:makebox(proofrule);fi.chardx...
l.452 endchar
             ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(0)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                           ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.452 endchar
             ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(h)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                           ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.452 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(h)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                           ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.452 endchar
             ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
<for(h)> proofrule((0,(EXPR0)),(w,(EXPR0)));
                                             ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.452 endchar
             ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(-d)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.452 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(-d)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.452 endchar
             ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
<for(-d)> proofrule((0,(EXPR0)),(w,(EXPR0)));
                                              ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.452 endchar
             ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(0)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.452 endchar
             ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
<for(0)> ...frule(((EXPR0),-d.o_),((EXPR0),h.o_));
                                                   ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.452 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->special"rule";numspecial.xpart(EXPR0);
                                                 numspecial.ypart(EXPR0);num...
<for(w)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.452 endchar
             ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(w)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.452 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(w)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.452 endchar
             ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
<for(w)> ...frule(((EXPR0),-d.o_),((EXPR0),h.o_));
                                                   ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.452 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Internal quantity `chardx' must receive a known value.
<to be read again> 
                   ;
endchar->...ing>0:makebox(proofrule);fi.chardx:=w;
                                                  shipit;if.displaying>0:mak...
l.452 endchar
             ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

[0]
>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(0)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.452 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(h)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.452 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(h)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.452 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(h)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.452 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(-d)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                             ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.452 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(-d)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                             ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.452 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(-d)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                             ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.452 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(0)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.452 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(0)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.452 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.452 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.452 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.452 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.452 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

! Extra `endgroup'.
endchar->...makebox(screenrule);showit;fi.endgroup
                                                  
l.452 endchar
             ;
I'm not currently working on a `begingroup',
so I had better not try to end anything.

>> bbchar
! Isolated expression.
<to be read again> 
                   (
l.457    (
          "p")
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.457    (
          "p")
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

The letter p
>> farrightof
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.465       farrightof (
                        Top - cCurl)~Left
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.465       farrightof (
                        Top - cCurl)~Left
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.465       farrightof (
                        Top - cCurl)~Left
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> fatten.rightof.Bottom~Left
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.475             --
                     rightof Top~Left;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.475             --
                     rightof Top~Left;
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.475             --
                     rightof Top~Left;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(0)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                           ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.477 endchar
             ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(h)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                           ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.477 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(h)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                           ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.477 endchar
             ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
<for(h)> proofrule((0,(EXPR0)),(w,(EXPR0)));
                                             ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.477 endchar
             ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(-d)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.477 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(-d)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.477 endchar
             ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
<for(-d)> proofrule((0,(EXPR0)),(w,(EXPR0)));
                                              ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.477 endchar
             ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(0)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.477 endchar
             ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
<for(0)> ...frule(((EXPR0),-d.o_),((EXPR0),h.o_));
                                                   ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.477 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->special"rule";numspecial.xpart(EXPR0);
                                                 numspecial.ypart(EXPR0);num...
<for(w)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.477 endchar
             ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(w)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.477 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(w)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.477 endchar
             ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
<for(w)> ...frule(((EXPR0),-d.o_),((EXPR0),h.o_));
                                                   ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.477 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Internal quantity `chardx' must receive a known value.
<to be read again> 
                   ;
endchar->...ing>0:makebox(proofrule);fi.chardx:=w;
                                                  shipit;if.displaying>0:mak...
l.477 endchar
             ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

[0]
>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(0)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.477 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(h)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.477 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(h)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.477 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(h)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.477 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(-d)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                             ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.477 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(-d)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                             ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.477 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(-d)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                             ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.477 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(0)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.477 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(0)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.477 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.477 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.477 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.477 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.477 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

! Extra `endgroup'.
endchar->...makebox(screenrule);showit;fi.endgroup
                                                  
l.477 endchar
             ;
I'm not currently working on a `begingroup',
so I had better not try to end anything.

>> bbchar
! Isolated expression.
<to be read again> 
                   (
l.482    (
          "q")
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.482    (
          "q")
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

The letter q
>> var
! Isolated expression.
<to be read again> 
                   (
l.489    var (
              path) qpath;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.489    var (
              path) qpath;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

! Extra tokens will be flushed.
<to be read again> 
                   ~
l.492       = (Top - cCurl)~
                            Right
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> fatcliptwice
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.501          (
                oabove rightof Top~Left -- obelow rightof Bottom~Left)
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.501          (
                oabove rightof Top~Left -- obelow rightof Bottom~Left)
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.501          (
                oabove rightof Top~Left -- obelow rightof Bottom~Left)
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> Top-0.2sixBowl-0.39998
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
l.505    draw qpath;
                    
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
l.505    draw qpath;
                    
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
l.505    draw qpath;
                    
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> Bottom~Right
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.510          --
                  Top~Right
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.510          --
                  Top~Right
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.510          --
                  Top~Right
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> bbchar
! Isolated expression.
<to be read again> 
                   (
l.517    (
          "r")
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.517    (
          "r")
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

The letter r
>> fatten.rightof.Bottom~Left
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.527             --
                     rightof Top~Left;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.527             --
                     rightof Top~Left;
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.527             --
                     rightof Top~Left;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> farrightof
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.531       farrightof (
                        Top - cCurl)~Left
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.531       farrightof (
                        Top - cCurl)~Left
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.531       farrightof (
                        Top - cCurl)~Left
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> bbchar
! Isolated expression.
<to be read again> 
                   (
l.540    (
          "s")
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.540    (
          "s")
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

The letter s
>> var
! Isolated expression.
<to be read again> 
                   (
l.547    var (
              path) spath;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.547    var (
              path) spath;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

! Extra tokens will be flushed.
<to be read again> 
                   ~
l.550       = (Top - cCurl)~
                            Right
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> fatcliptwice
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.561          (
                oabove rightof Top~Left -- obelow rightof Bottom~Left)
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.561          (
                oabove rightof Top~Left -- obelow rightof Bottom~Left)
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.561          (
                oabove rightof Top~Left -- obelow rightof Bottom~Left)
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> Top-0.2sixBowl-0.39998
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
endchar->scantokens.extra_endchar;
                                  if.proofing>0:makebox(proofrule);fi.chardx...
l.567 endchar
             ;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
endchar->scantokens.extra_endchar;
                                  if.proofing>0:makebox(proofrule);fi.chardx...
l.567 endchar
             ;
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
endchar->scantokens.extra_endchar;
                                  if.proofing>0:makebox(proofrule);fi.chardx...
l.567 endchar
             ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(0)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                           ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.567 endchar
             ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(h)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                           ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.567 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(h)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                           ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.567 endchar
             ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
<for(h)> proofrule((0,(EXPR0)),(w,(EXPR0)));
                                             ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.567 endchar
             ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(-d)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.567 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(-d)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.567 endchar
             ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
<for(-d)> proofrule((0,(EXPR0)),(w,(EXPR0)));
                                              ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.567 endchar
             ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(0)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.567 endchar
             ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
<for(0)> ...frule(((EXPR0),-d.o_),((EXPR0),h.o_));
                                                   ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.567 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->special"rule";numspecial.xpart(EXPR0);
                                                 numspecial.ypart(EXPR0);num...
<for(w)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.567 endchar
             ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(w)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.567 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(w)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.567 endchar
             ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
<for(w)> ...frule(((EXPR0),-d.o_),((EXPR0),h.o_));
                                                   ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.567 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Internal quantity `chardx' must receive a known value.
<to be read again> 
                   ;
endchar->...ing>0:makebox(proofrule);fi.chardx:=w;
                                                  shipit;if.displaying>0:mak...
l.567 endchar
             ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

[0]
>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(0)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.567 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(h)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.567 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(h)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.567 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(h)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.567 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(-d)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                             ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.567 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(-d)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                             ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.567 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(-d)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                             ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.567 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(0)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.567 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(0)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.567 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.567 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.567 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.567 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.567 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

! Extra `endgroup'.
endchar->...makebox(screenrule);showit;fi.endgroup
                                                  
l.567 endchar
             ;
I'm not currently working on a `begingroup',
so I had better not try to end anything.

>> bbchar
! Isolated expression.
<to be read again> 
                   (
l.572    (
          "t")
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.572    (
          "t")
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

The letter t
>> var
! Isolated expression.
<to be read again> 
                   (
l.579    var (
              path) tpath;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.579    var (
              path) tpath;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

! Extra tokens will be flushed.
<to be read again> 
                   ~
l.582       = (Bottom + hCurl)~
                               Left {down}
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> aTop~Left
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.589          --
                  aTop~Right;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.589          --
                  aTop~Right;
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.589          --
                  aTop~Right;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> outline.fatcliponce
! Isolated expression.
<to be read again> 
                   (
l.594          (
                rightof Top~Left -- obelow rightof Bottom~Left)
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.594          (
                rightof Top~Left -- obelow rightof Bottom~Left)
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> Bottom+0.4sixBowl+0.29965
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
endchar->scantokens.extra_endchar;
                                  if.proofing>0:makebox(proofrule);fi.chardx...
l.600 endchar
             ;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
endchar->scantokens.extra_endchar;
                                  if.proofing>0:makebox(proofrule);fi.chardx...
l.600 endchar
             ;
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
endchar->scantokens.extra_endchar;
                                  if.proofing>0:makebox(proofrule);fi.chardx...
l.600 endchar
             ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(0)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                           ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.600 endchar
             ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(h)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                           ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.600 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(h)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                           ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.600 endchar
             ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
<for(h)> proofrule((0,(EXPR0)),(w,(EXPR0)));
                                             ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.600 endchar
             ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(-d)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.600 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(-d)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.600 endchar
             ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
<for(-d)> proofrule((0,(EXPR0)),(w,(EXPR0)));
                                              ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.600 endchar
             ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(0)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.600 endchar
             ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
<for(0)> ...frule(((EXPR0),-d.o_),((EXPR0),h.o_));
                                                   ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.600 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->special"rule";numspecial.xpart(EXPR0);
                                                 numspecial.ypart(EXPR0);num...
<for(w)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.600 endchar
             ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(w)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.600 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(w)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.600 endchar
             ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
<for(w)> ...frule(((EXPR0),-d.o_),((EXPR0),h.o_));
                                                   ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.600 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Internal quantity `chardx' must receive a known value.
<to be read again> 
                   ;
endchar->...ing>0:makebox(proofrule);fi.chardx:=w;
                                                  shipit;if.displaying>0:mak...
l.600 endchar
             ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

[0]
>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(0)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.600 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(h)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.600 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(h)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.600 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(h)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.600 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(-d)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                             ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.600 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(-d)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                             ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.600 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(-d)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                             ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.600 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(0)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.600 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(0)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.600 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.600 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.600 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.600 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.600 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

! Extra `endgroup'.
endchar->...makebox(screenrule);showit;fi.endgroup
                                                  
l.600 endchar
             ;
I'm not currently working on a `begingroup',
so I had better not try to end anything.

>> bbchar
! Isolated expression.
<to be read again> 
                   (
l.605    (
          "u")
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.605    (
          "u")
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

The letter u
>> var
! Isolated expression.
<to be read again> 
                   (
l.612    var (
              path) upath;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.612    var (
              path) upath;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

! Extra tokens will be flushed.
<to be read again> 
                   ..
---->..
       tension.infinity..
l.616            ---
                     Horizon~Left
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> fatcliponce
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.623          (
                rightof Top~Left -- obelow rightof Bottom~Left)
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.623          (
                rightof Top~Left -- obelow rightof Bottom~Left)
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.623          (
                rightof Top~Left -- obelow rightof Bottom~Left)
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> Top~Left
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
l.627    draw upath;
                    
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
l.627    draw upath;
                    
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
l.627    draw upath;
                    
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> Bottom~Right
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.632          --
                  Top~Right
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.632          --
                  Top~Right
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.632          --
                  Top~Right
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> bbchar
! Isolated expression.
<to be read again> 
                   (
l.639    (
          "v")
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.639    (
          "v")
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> symmetric
! Isolated expression.
<to be read again> 
                   ;
l.643    symmetric;
                   
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

The letter v
>> fatcliponce
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.650          (
                rightof Top~Left -- rightof Bottom~Middle)
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.650          (
                rightof Top~Left -- rightof Bottom~Middle)
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.650          (
                rightof Top~Left -- rightof Bottom~Middle)
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> Bottom~Middle
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.656          --
                  Top~Right
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.656          --
                  Top~Right
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.656          --
                  Top~Right
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> bbchar
! Isolated expression.
<to be read again> 
                   (
l.663    (
          "w")
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.663    (
          "w")
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> symmetric
! Isolated expression.
<to be read again> 
                   ;
l.667    symmetric;
                   
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

The letter w
>> fatcliponce
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.674          (
                rightof Top~Left -- rightof Bottom~(Left -+- Middle))
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.674          (
                rightof Top~Left -- rightof Bottom~(Left -+- Middle))
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.674          (
                rightof Top~Left -- rightof Bottom~(Left -+- Middle))
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> Bottom~
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.679       Bottom~(
                    Left -+- Middle)
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.679       Bottom~(
                    Left -+- Middle)
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.679       Bottom~(
                    Left -+- Middle)
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> bbchar
! Isolated expression.
<to be read again> 
                   (
l.689    (
          "x")
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.689    (
          "x")
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

The letter x
>> Top~Left
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.698          --
                  Bottom~Right;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.698          --
                  Bottom~Right;
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.698          --
                  Bottom~Right;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> outline.fatten.leftof.Top~Right
! Isolated expression.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.704             --
                     rightof Bottom~Left
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.704             --
                     rightof Bottom~Left
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> bbchar
! Isolated expression.
<to be read again> 
                   (
l.711    (
          "y")
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.711    (
          "y")
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> symmetric
! Isolated expression.
<to be read again> 
                   ;
l.715    symmetric;
                   
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

The letter y
>> fatcliponce
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.722          (
                rightof Top~Left -- rightof aBottom~Middle)
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.722          (
                rightof Top~Left -- rightof aBottom~Middle)
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.722          (
                rightof Top~Left -- rightof aBottom~Middle)
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> Top~Right
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ..
---->..
       tension.infinity..
l.728          ---
                   aBottom~Middle
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ..
---->..
       tension.infinity..
l.728          ---
                   aBottom~Middle
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ..
---->..
       tension.infinity..
l.728          ---
                   aBottom~Middle
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> bbchar
! Isolated expression.
<to be read again> 
                   (
l.736    (
          "z")
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.736    (
          "z")
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

The letter z
>> Top~Left
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.745          --
                  Top~Right;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.745          --
                  Top~Right;
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.745          --
                  Top~Right;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> fatten.leftof.Top~Right
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.751             --
                     rightof Bottom~Left;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.751             --
                     rightof Bottom~Left;
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.751             --
                     rightof Bottom~Left;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> Bottom~Left
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.756          --
                  Bottom~Right
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.756          --
                  Bottom~Right
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.756          --
                  Bottom~Right
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

) (/usr/share/texmf/fonts/source/public/bbold/bbpunc.mf
>> bbcap
! Isolated expression.
<to be read again> 
                   (
l.6    (
        "!")
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.6    (
        "!")
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> fatsymmetric
! Isolated expression.
<to be read again> 
                   ;
l.9    fatsymmetric;
                    
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

Exclamation mark `!'
>> fatten.Top~Middle
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.17             --
                    (Bottom + space + fatness)~Middle;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.17             --
                    (Bottom + space + fatness)~Middle;
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.17             --
                    (Bottom + space + fatness)~Middle;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> splodge.above.Bottom~Middle
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
endchar->scantokens.extra_endchar;
                                  if.proofing>0:makebox(proofrule);fi.chardx...
l.24 endchar
            ;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
endchar->scantokens.extra_endchar;
                                  if.proofing>0:makebox(proofrule);fi.chardx...
l.24 endchar
            ;
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
endchar->scantokens.extra_endchar;
                                  if.proofing>0:makebox(proofrule);fi.chardx...
l.24 endchar
            ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(0)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                           ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.24 endchar
            ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(h)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                           ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.24 endchar
            ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(h)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                           ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.24 endchar
            ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
<for(h)> proofrule((0,(EXPR0)),(w,(EXPR0)));
                                             ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.24 endchar
            ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(-d)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.24 endchar
            ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(-d)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.24 endchar
            ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
<for(-d)> proofrule((0,(EXPR0)),(w,(EXPR0)));
                                              ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.24 endchar
            ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(0)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.24 endchar
            ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
<for(0)> ...frule(((EXPR0),-d.o_),((EXPR0),h.o_));
                                                   ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.24 endchar
            ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->special"rule";numspecial.xpart(EXPR0);
                                                 numspecial.ypart(EXPR0);num...
<for(w)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.24 endchar
            ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(w)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.24 endchar
            ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(w)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.24 endchar
            ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
<for(w)> ...frule(((EXPR0),-d.o_),((EXPR0),h.o_));
                                                   ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.24 endchar
            ;
The expression shown above has the wrong type to be output.

>> w
! Internal quantity `chardx' must receive a known value.
<to be read again> 
                   ;
endchar->...ing>0:makebox(proofrule);fi.chardx:=w;
                                                  shipit;if.displaying>0:mak...
l.24 endchar
            ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

[0]
>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(0)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.24 endchar
            ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(h)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.24 endchar
            ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(h)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.24 endchar
            ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(h)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.24 endchar
            ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(-d)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                             ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.24 endchar
            ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(-d)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                             ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.24 endchar
            ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(-d)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                             ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.24 endchar
            ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(0)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.24 endchar
            ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(0)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.24 endchar
            ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.24 endchar
            ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.24 endchar
            ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.24 endchar
            ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.24 endchar
            ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

! Extra `endgroup'.
endchar->...makebox(screenrule);showit;fi.endgroup
                                                  
l.24 endchar
            ;
I'm not currently working on a `begingroup',
so I had better not try to end anything.

>> bbchar
! Isolated expression.
<to be read again> 
                   (
l.29    (
         "#")
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.29    (
         "#")
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

The hash sign `#'
>> Horizon+0.66667bigspace+0.16666
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ~
l.37       (Horizon + space)~
                             Left
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ~
l.37       (Horizon + space)~
                             Left
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ~
l.37       (Horizon + space)~
                             Left
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> Horizon-0.66667bigspace-0.16666
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ~
l.42       (Horizon - space)~
                             Left
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ~
l.42       (Horizon - space)~
                             Left
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ~
l.42       (Horizon - space)~
                             Left
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> rightof.Top~
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.47       rightof Top~(
                        Middle + space)
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.47       rightof Top~(
                        Middle + space)
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.47       rightof Top~(
                        Middle + space)
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> outline.fatten.rightof.Top~
! Isolated expression.
<to be read again> 
                   (
l.53          rightof Top~(
                           Middle - space)
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.53          rightof Top~(
                           Middle - space)
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> bbchar
! Isolated expression.
<to be read again> 
                   (
l.61    (
         "$")
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.61    (
         "$")
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> fatsymmetric
! Isolated expression.
<to be read again> 
                   ;
l.65    fatsymmetric;
                     
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

Dollar sign `$'
>> Top-0.38461BBar-0.30772
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ~
l.71       (Top - CCurl)~
                         Right
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ~
l.71       (Top - CCurl)~
                         Right
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ~
l.71       (Top - CCurl)~
                         Right
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> outline.fatten.Bottom~Middle
! Isolated expression.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.83             --
                    Top~Middle
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.83             --
                    Top~Middle
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> bbchar
! Isolated expression.
<to be read again> 
                   (
l.90    (
         "%")
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.90    (
         "%")
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> fatsymmetric
! Isolated expression.
<to be read again> 
                   ;
l.94    fatsymmetric;
                     
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

Per cent sign `%'
>> splodge.below.rightof.Top~Left
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
l.101          below rightof Top~Left;
                                      
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
l.101          below rightof Top~Left;
                                      
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
l.101          below rightof Top~Left;
                                      
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> splodge.above.leftof.Bottom~Right
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
l.106          above leftof Bottom~Right;
                                         
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
l.106          above leftof Bottom~Right;
                                         
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
l.106          above leftof Bottom~Right;
                                         
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> fatten.rightof.Bottom~Left
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.112             --
                     leftof Top~Right
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.112             --
                     leftof Top~Right
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.112             --
                     leftof Top~Right
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> bbchar
! Isolated expression.
<to be read again> 
                   (
l.119    (
          "&")
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.119    (
          "&")
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

Ampersand `&'
! Missing `]' has been inserted.
<to be read again> 
                   (
l.128    z1 = whatever[leftof Top~Middle, Bottom~(
                                                  Left -+- Middle)];
I've scanned an expression of the form `a[b,c',
so a right bracket should have come next.
I shall pretend that one was there.

>> %CAPSULE6480
>> -leftof.Top~Middle+Bottom~
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   (
<to be read again> 
                   (
l.128    z1 = whatever[leftof Top~Middle, Bottom~(
                                                  Left -+- Middle)];
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (x1,y1)
>> Bottom~
! Equation cannot be performed (pair=numeric).
<to be read again> 
                   (
l.128    z1 = whatever[leftof Top~Middle, Bottom~(
                                                  Left -+- Middle)];
I'm sorry, but I don't know how to make such things equal.
(See the two expressions just above the error message.)

! Extra tokens will be flushed.
<to be read again> 
                   (
l.128    z1 = whatever[leftof Top~Middle, Bottom~(
                                                  Left -+- Middle)];
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> var
! Isolated expression.
<to be read again> 
                   (
l.132    var (
              path) ampersandpath;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.132    var (
              path) ampersandpath;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

! Extra tokens will be flushed.
<to be read again> 
                   ~
l.135       = (Bottom + cCurl)~
                               Right
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> fatcliptwice
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.147          (
                obelow rightof Bottom~Left -- rightof Top~Left)
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.147          (
                obelow rightof Bottom~Left -- rightof Top~Left)
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.147          (
                obelow rightof Bottom~Left -- rightof Top~Left)
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> Bottom+0.2sixBowl+0.39998
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
endchar->scantokens.extra_endchar;
                                  if.proofing>0:makebox(proofrule);fi.chardx...
l.153 endchar
             ;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
endchar->scantokens.extra_endchar;
                                  if.proofing>0:makebox(proofrule);fi.chardx...
l.153 endchar
             ;
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
endchar->scantokens.extra_endchar;
                                  if.proofing>0:makebox(proofrule);fi.chardx...
l.153 endchar
             ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(0)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                           ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.153 endchar
             ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(h)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                           ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.153 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(h)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                           ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.153 endchar
             ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
<for(h)> proofrule((0,(EXPR0)),(w,(EXPR0)));
                                             ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.153 endchar
             ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(-d)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.153 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(-d)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.153 endchar
             ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
<for(-d)> proofrule((0,(EXPR0)),(w,(EXPR0)));
                                              ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.153 endchar
             ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(0)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.153 endchar
             ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
<for(0)> ...frule(((EXPR0),-d.o_),((EXPR0),h.o_));
                                                   ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.153 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->special"rule";numspecial.xpart(EXPR0);
                                                 numspecial.ypart(EXPR0);num...
<for(w)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.153 endchar
             ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(w)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.153 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(w)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.153 endchar
             ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
<for(w)> ...frule(((EXPR0),-d.o_),((EXPR0),h.o_));
                                                   ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.153 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Internal quantity `chardx' must receive a known value.
<to be read again> 
                   ;
endchar->...ing>0:makebox(proofrule);fi.chardx:=w;
                                                  shipit;if.displaying>0:mak...
l.153 endchar
             ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

[0]
>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(0)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.153 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(h)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.153 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(h)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.153 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(h)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.153 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(-d)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                             ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.153 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(-d)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                             ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.153 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(-d)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                             ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.153 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(0)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.153 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(0)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.153 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.153 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.153 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.153 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.153 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

! Extra `endgroup'.
endchar->...makebox(screenrule);showit;fi.endgroup
                                                  
l.153 endchar
             ;
I'm not currently working on a `begingroup',
so I had better not try to end anything.

>> bbchar
! Isolated expression.
<to be read again> 
                   (
l.158    (
          "'")
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.158    (
          "'")
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> fatsymmetric
! Isolated expression.
<to be read again> 
                   ;
l.162    fatsymmetric;
                      
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

Apostrophe `''
>> splodger.below.Top~Middle
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ..
l.169          ..
                  Bottom~Left
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ..
l.169          ..
                  Bottom~Left
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ..
l.169          ..
                  Bottom~Left
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> bbchar
! Isolated expression.
<to be read again> 
                   (
l.176    (
          "(")
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.176    (
          "(")
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

Left bracket `('
>> fatcliptwice
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.185          (
                rightof Bottom~Left -- rightof Top~Left)
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.185          (
                rightof Bottom~Left -- rightof Top~Left)
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.185          (
                rightof Bottom~Left -- rightof Top~Left)
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> Bottom~Right
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
l.190       Bottom~Right {
                          left}
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
l.190       Bottom~Right {
                          left}
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
l.190       Bottom~Right {
                          left}
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> bbchar
! Isolated expression.
<to be read again> 
                   (
l.199    (
          ")")
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.199    (
          ")")
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

Right bracket `)'
>> fatcliptwice
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.208          (
                leftof Bottom~Right -- leftof Top~Right)
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.208          (
                leftof Bottom~Right -- leftof Top~Right)
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.208          (
                leftof Bottom~Right -- leftof Top~Right)
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> Bottom~Left
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
l.213       Bottom~Left {
                         right}
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
l.213       Bottom~Left {
                         right}
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
l.213       Bottom~Left {
                         right}
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> bbchar
! Isolated expression.
<to be read again> 
                   (
l.222    (
          "*")
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.222    (
          "*")
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

Star `*'
>> var
! Isolated expression.
<to be read again> 
                   (
l.231    var (
              numeric) adistance;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.231    var (
              numeric) adistance;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> -0.5Horizon+0.5Top+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.232    adistance = round ((Top - Horizon) / 2);
                                                 
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> -0.5Horizon+Bottom+0.5Top+0.5
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ~
l.236       (Bottom + adistance)~
                                 Right
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ~
l.236       (Bottom + adistance)~
                                 Right
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ~
l.236       (Bottom + adistance)~
                                 Right
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> -0.5Horizon+Bottom+0.5Top+0.5
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ~
l.241       (Bottom + adistance)~
                                 Left
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ~
l.241       (Bottom + adistance)~
                                 Left
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ~
l.241       (Bottom + adistance)~
                                 Left
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> outline.fatten.Bottom~Middle
! Isolated expression.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.248             --
                     Top~Middle
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.248             --
                     Top~Middle
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> bbchar
! Isolated expression.
<to be read again> 
                   (
l.255    (
          "+")
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.255    (
          "+")
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> Horizon~Left
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.264          --
                  Horizon~Right;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.264          --
                  Horizon~Right;
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.264          --
                  Horizon~Right;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> outline.fatten.Bottom~Middle
! Isolated expression.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.270             --
                     Top~Middle
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.270             --
                     Top~Middle
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> bbchar
! Isolated expression.
<to be read again> 
                   (
l.277    (
          ",")
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.277    (
          ",")
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> fatsymmetric
! Isolated expression.
<to be read again> 
                   ;
l.281    fatsymmetric;
                      
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

Comma `,'
>> splodger.above.aBottom~Middle
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ..
l.288          ..
                  Bottom~Left
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ..
l.288          ..
                  Bottom~Left
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ..
l.288          ..
                  Bottom~Left
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> bbchar
! Isolated expression.
<to be read again> 
                   (
l.295    (
          "-")
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.295    (
          "-")
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

Hyphen `-'
>> Horizon~Left
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.304          --
                  Horizon~Right
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.304          --
                  Horizon~Right
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.304          --
                  Horizon~Right
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> bbchar
! Isolated expression.
<to be read again> 
                   (
l.311    (
          ".")
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.311    (
          ".")
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> fatsymmetric
! Isolated expression.
<to be read again> 
                   ;
l.315    fatsymmetric;
                      
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

Full stop `.'
>> splodge.above.Bottom~Middle
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
endchar->scantokens.extra_endchar;
                                  if.proofing>0:makebox(proofrule);fi.chardx...
l.324 endchar
             ;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
endchar->scantokens.extra_endchar;
                                  if.proofing>0:makebox(proofrule);fi.chardx...
l.324 endchar
             ;
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
endchar->scantokens.extra_endchar;
                                  if.proofing>0:makebox(proofrule);fi.chardx...
l.324 endchar
             ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(0)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                           ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.324 endchar
             ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(h)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                           ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.324 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(h)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                           ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.324 endchar
             ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
<for(h)> proofrule((0,(EXPR0)),(w,(EXPR0)));
                                             ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.324 endchar
             ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(-d)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.324 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(-d)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.324 endchar
             ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
<for(-d)> proofrule((0,(EXPR0)),(w,(EXPR0)));
                                              ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.324 endchar
             ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(0)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.324 endchar
             ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
<for(0)> ...frule(((EXPR0),-d.o_),((EXPR0),h.o_));
                                                   ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.324 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->special"rule";numspecial.xpart(EXPR0);
                                                 numspecial.ypart(EXPR0);num...
<for(w)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.324 endchar
             ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(w)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.324 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(w)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.324 endchar
             ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
<for(w)> ...frule(((EXPR0),-d.o_),((EXPR0),h.o_));
                                                   ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.324 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Internal quantity `chardx' must receive a known value.
<to be read again> 
                   ;
endchar->...ing>0:makebox(proofrule);fi.chardx:=w;
                                                  shipit;if.displaying>0:mak...
l.324 endchar
             ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

[0]
>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(0)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.324 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(h)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.324 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(h)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.324 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(h)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.324 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(-d)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                             ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.324 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(-d)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                             ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.324 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(-d)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                             ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.324 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(0)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.324 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(0)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.324 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.324 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.324 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.324 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.324 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

! Extra `endgroup'.
endchar->...makebox(screenrule);showit;fi.endgroup
                                                  
l.324 endchar
             ;
I'm not currently working on a `begingroup',
so I had better not try to end anything.

>> bbchar
! Isolated expression.
<to be read again> 
                   (
l.329    (
          "/")
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.329    (
          "/")
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

Virgule (slash) `/'
>> fatten.rightof.Bottom~Left
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.339            --
                    leftof Top~Right
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.339            --
                    leftof Top~Right
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.339            --
                    leftof Top~Right
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> bbchar
! Isolated expression.
<to be read again> 
                   (
l.346    (
          ":")
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.346    (
          ":")
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> fatsymmetric
! Isolated expression.
<to be read again> 
                   ;
l.350    fatsymmetric;
                      
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

Colon `:'
>> splodge.below.Top~Middle
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
l.357          below Top~Middle;
                                
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
l.357          below Top~Middle;
                                
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
l.357          below Top~Middle;
                                
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> splodge.above.Bottom~Middle
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
endchar->scantokens.extra_endchar;
                                  if.proofing>0:makebox(proofrule);fi.chardx...
l.364 endchar
             ;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
endchar->scantokens.extra_endchar;
                                  if.proofing>0:makebox(proofrule);fi.chardx...
l.364 endchar
             ;
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
endchar->scantokens.extra_endchar;
                                  if.proofing>0:makebox(proofrule);fi.chardx...
l.364 endchar
             ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(0)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                           ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.364 endchar
             ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(h)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                           ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.364 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(h)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                           ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.364 endchar
             ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
<for(h)> proofrule((0,(EXPR0)),(w,(EXPR0)));
                                             ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.364 endchar
             ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(-d)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.364 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(-d)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.364 endchar
             ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
<for(-d)> proofrule((0,(EXPR0)),(w,(EXPR0)));
                                              ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.364 endchar
             ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(0)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.364 endchar
             ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
<for(0)> ...frule(((EXPR0),-d.o_),((EXPR0),h.o_));
                                                   ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.364 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->special"rule";numspecial.xpart(EXPR0);
                                                 numspecial.ypart(EXPR0);num...
<for(w)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.364 endchar
             ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(w)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.364 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(w)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.364 endchar
             ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
<for(w)> ...frule(((EXPR0),-d.o_),((EXPR0),h.o_));
                                                   ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.364 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Internal quantity `chardx' must receive a known value.
<to be read again> 
                   ;
endchar->...ing>0:makebox(proofrule);fi.chardx:=w;
                                                  shipit;if.displaying>0:mak...
l.364 endchar
             ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

[0]
>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(0)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.364 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(h)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.364 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(h)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.364 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(h)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.364 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(-d)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                             ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.364 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(-d)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                             ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.364 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(-d)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                             ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.364 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(0)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.364 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(0)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.364 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.364 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.364 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.364 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.364 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

! Extra `endgroup'.
endchar->...makebox(screenrule);showit;fi.endgroup
                                                  
l.364 endchar
             ;
I'm not currently working on a `begingroup',
so I had better not try to end anything.

>> bbchar
! Isolated expression.
<to be read again> 
                   (
l.369    (
          ";")
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.369    (
          ";")
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> fatsymmetric
! Isolated expression.
<to be read again> 
                   ;
l.373    fatsymmetric;
                      
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

Semicolon `;'
>> splodge.below.Top~Middle
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
l.380          below Top~Middle;
                                
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
l.380          below Top~Middle;
                                
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
l.380          below Top~Middle;
                                
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> splodger.above.aBottom~Middle
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ..
l.385          ..
                  Bottom~Left
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ..
l.385          ..
                  Bottom~Left
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ..
l.385          ..
                  Bottom~Left
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> beginblacker1.5
! Isolated expression.
<to be read again> 
                   ;
l.391 beginblacker 1.5;
                       
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

>> bbchar
! Isolated expression.
<to be read again> 
                   (
l.393    (
          "<")
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.393    (
          "<")
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

Less than sign `<'
>> Top~Right
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ..
---->..
       tension.infinity..
l.402          ---
                   Horizon~Left;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ..
---->..
       tension.infinity..
l.402          ---
                   Horizon~Left;
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ..
---->..
       tension.infinity..
l.402          ---
                   Horizon~Left;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> fatcliponce
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.409          (
                leftof Bottom~Right
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.409          (
                leftof Bottom~Right
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.409          (
                leftof Bottom~Right
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> endblacker
! Isolated expression.
<to be read again> 
                   ;
l.415 endblacker;
                 
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

>> bbchar
! Isolated expression.
<to be read again> 
                   (
l.420    (
          "=")
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.420    (
          "=")
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> fatsymmetric
! Isolated expression.
<to be read again> 
                   ;
l.424    fatsymmetric;
                      
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

Centred dot
>> splodge.above.Bottom~Middle
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
endchar->scantokens.extra_endchar;
                                  if.proofing>0:makebox(proofrule);fi.chardx...
l.433 endchar
             ;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
endchar->scantokens.extra_endchar;
                                  if.proofing>0:makebox(proofrule);fi.chardx...
l.433 endchar
             ;
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
endchar->scantokens.extra_endchar;
                                  if.proofing>0:makebox(proofrule);fi.chardx...
l.433 endchar
             ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(0)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                           ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.433 endchar
             ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(h)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                           ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.433 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(h)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                           ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.433 endchar
             ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
<for(h)> proofrule((0,(EXPR0)),(w,(EXPR0)));
                                             ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.433 endchar
             ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(-d)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.433 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(-d)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.433 endchar
             ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
<for(-d)> proofrule((0,(EXPR0)),(w,(EXPR0)));
                                              ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.433 endchar
             ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(0)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.433 endchar
             ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
<for(0)> ...frule(((EXPR0),-d.o_),((EXPR0),h.o_));
                                                   ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.433 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->special"rule";numspecial.xpart(EXPR0);
                                                 numspecial.ypart(EXPR0);num...
<for(w)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.433 endchar
             ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(w)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.433 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(w)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.433 endchar
             ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
<for(w)> ...frule(((EXPR0),-d.o_),((EXPR0),h.o_));
                                                   ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.433 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Internal quantity `chardx' must receive a known value.
<to be read again> 
                   ;
endchar->...ing>0:makebox(proofrule);fi.chardx:=w;
                                                  shipit;if.displaying>0:mak...
l.433 endchar
             ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

[0]
>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(0)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.433 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(h)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.433 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(h)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.433 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(h)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.433 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(-d)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                             ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.433 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(-d)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                             ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.433 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(-d)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                             ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.433 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(0)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.433 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(0)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.433 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.433 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.433 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.433 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.433 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

! Extra `endgroup'.
endchar->...makebox(screenrule);showit;fi.endgroup
                                                  
l.433 endchar
             ;
I'm not currently working on a `begingroup',
so I had better not try to end anything.

>> beginblacker1.5
! Isolated expression.
<to be read again> 
                   ;
l.437 beginblacker 1.5;
                       
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

>> bbchar
! Isolated expression.
<to be read again> 
                   (
l.440    (
          ">")
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.440    (
          ">")
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

Greater than sign `>'
>> Top~Left
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ..
---->..
       tension.infinity..
l.449          ---
                   Horizon~Right;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ..
---->..
       tension.infinity..
l.449          ---
                   Horizon~Right;
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ..
---->..
       tension.infinity..
l.449          ---
                   Horizon~Right;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> fatcliponce
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.456          (
                rightof Bottom~Left
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.456          (
                rightof Bottom~Left
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.456          (
                rightof Bottom~Left
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> endblacker
! Isolated expression.
<to be read again> 
                   ;
l.462 endblacker;
                 
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

>> bbcap
! Isolated expression.
<to be read again> 
                   (
l.467    (
          "?")
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.467    (
          "?")
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> fatsymmetric
! Isolated expression.
<to be read again> 
                   ;
l.470    fatsymmetric;
                      
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

Question mark `?'
>> var
! Isolated expression.
<to be read again> 
                   (
l.475    var (
              numeric) curlBottom;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.475    var (
              numeric) curlBottom;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> var
! Isolated expression.
<to be read again> 
                   (
l.480    var (
              path) questionpath;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.480    var (
              path) questionpath;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

! Extra tokens will be flushed.
<to be read again> 
                   ~
l.483       = (Top - CCurl)~
                            Left
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> Top-0.38461BBar-0.30772
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
l.489    draw questionpath;
                           
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
l.489    draw questionpath;
                           
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
l.489    draw questionpath;
                           
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> fatcliponce
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.494          (
                curlBottom~Middle -- oabove Top~Middle)
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.494          (
                curlBottom~Middle -- oabove Top~Middle)
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.494          (
                curlBottom~Middle -- oabove Top~Middle)
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> splodge.above.Bottom~Middle
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
endchar->scantokens.extra_endchar;
                                  if.proofing>0:makebox(proofrule);fi.chardx...
l.502 endchar
             ;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
endchar->scantokens.extra_endchar;
                                  if.proofing>0:makebox(proofrule);fi.chardx...
l.502 endchar
             ;
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
endchar->scantokens.extra_endchar;
                                  if.proofing>0:makebox(proofrule);fi.chardx...
l.502 endchar
             ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(0)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                           ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.502 endchar
             ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(h)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                           ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.502 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(h)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                           ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.502 endchar
             ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
<for(h)> proofrule((0,(EXPR0)),(w,(EXPR0)));
                                             ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.502 endchar
             ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(-d)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.502 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(-d)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.502 endchar
             ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
<for(-d)> proofrule((0,(EXPR0)),(w,(EXPR0)));
                                              ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.502 endchar
             ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(0)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.502 endchar
             ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
<for(0)> ...frule(((EXPR0),-d.o_),((EXPR0),h.o_));
                                                   ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.502 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->special"rule";numspecial.xpart(EXPR0);
                                                 numspecial.ypart(EXPR0);num...
<for(w)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.502 endchar
             ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(w)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.502 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(w)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.502 endchar
             ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
<for(w)> ...frule(((EXPR0),-d.o_),((EXPR0),h.o_));
                                                   ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.502 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Internal quantity `chardx' must receive a known value.
<to be read again> 
                   ;
endchar->...ing>0:makebox(proofrule);fi.chardx:=w;
                                                  shipit;if.displaying>0:mak...
l.502 endchar
             ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

[0]
>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(0)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.502 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(h)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.502 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(h)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.502 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(h)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.502 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(-d)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                             ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.502 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(-d)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                             ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.502 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(-d)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                             ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.502 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(0)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.502 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(0)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.502 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.502 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.502 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.502 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.502 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

! Extra `endgroup'.
endchar->...makebox(screenrule);showit;fi.endgroup
                                                  
l.502 endchar
             ;
I'm not currently working on a `begingroup',
so I had better not try to end anything.

>> bbchar
! Isolated expression.
<to be read again> 
                   (
l.507    (
          "@")
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.507    (
          "@")
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

At sign `@'
>> var
! Isolated expression.
<to be read again> 
                   (
l.514    var (
              path) atpath;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.514    var (
              path) atpath;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

! Extra tokens will be flushed.
<to be read again> 
                   ~
l.517       = (Bottom + CCurl)~
                               Right
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> fatcliptwice
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.526          (
                obelow rightof Bottom~Left -- oabove rightof Top~Left)
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.526          (
                obelow rightof Bottom~Left -- oabove rightof Top~Left)
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.526          (
                obelow rightof Bottom~Left -- oabove rightof Top~Left)
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> Bottom+0.38461BBar+0.30772
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
endchar->scantokens.extra_endchar;
                                  if.proofing>0:makebox(proofrule);fi.chardx...
l.532 endchar
             ;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
endchar->scantokens.extra_endchar;
                                  if.proofing>0:makebox(proofrule);fi.chardx...
l.532 endchar
             ;
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ;
endchar->scantokens.extra_endchar;
                                  if.proofing>0:makebox(proofrule);fi.chardx...
l.532 endchar
             ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(0)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                           ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.532 endchar
             ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(h)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                           ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.532 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(h)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                           ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.532 endchar
             ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
<for(h)> proofrule((0,(EXPR0)),(w,(EXPR0)));
                                             ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.532 endchar
             ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(-d)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.532 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(-d)> proofrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.532 endchar
             ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
<for(-d)> proofrule((0,(EXPR0)),(w,(EXPR0)));
                                              ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.532 endchar
             ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(0)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.532 endchar
             ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
<for(0)> ...frule(((EXPR0),-d.o_),((EXPR0),h.o_));
                                                   ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.532 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->special"rule";numspecial.xpart(EXPR0);
                                                 numspecial.ypart(EXPR0);num...
<for(w)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.532 endchar
             ;
The expression shown above has the wrong type to be output.

>> -d
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(w)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.532 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.xpart(EXPR1);
                                                  numspecial.ypart(EXPR1)
<for(w)> proofrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.532 endchar
             ;
The expression shown above has the wrong type to be output.

>> h
! Unsuitable expression.
<to be read again> 
                   ;
<for(w)> ...frule(((EXPR0),-d.o_),((EXPR0),h.o_));
                                                   ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.532 endchar
             ;
The expression shown above has the wrong type to be output.

>> w
! Internal quantity `chardx' must receive a known value.
<to be read again> 
                   ;
endchar->...ing>0:makebox(proofrule);fi.chardx:=w;
                                                  shipit;if.displaying>0:mak...
l.532 endchar
             ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

[0]
>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(0)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.532 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(h)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.532 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(h)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.532 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(h)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                            ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.532 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(-d)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                             ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.532 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(-d)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                             ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.532 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(-d)> screenrule((0,(EXPR0)),(w,(EXPR0)))
                                             ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.532 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(0)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.532 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(0)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.532 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.532 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -d
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.532 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> w
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.532 endchar
             ;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> h
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(w)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.532 endchar
             ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

! Extra `endgroup'.
endchar->...makebox(screenrule);showit;fi.endgroup
                                                  
l.532 endchar
             ;
I'm not currently working on a `begingroup',
so I had better not try to end anything.

>> bbchar
! Isolated expression.
<to be read again> 
                   (
l.537    (
          "[")
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.537    (
          "[")
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

Left square bracket `['
>> fatten.rightof.Bottom~Left
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.547             --
                     rightof Top~Left;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.547             --
                     rightof Top~Left;
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.547             --
                     rightof Top~Left;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> Top~Left
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.552          --
                  Top~Right;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.552          --
                  Top~Right;
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.552          --
                  Top~Right;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> Bottom~Left
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.557          --
                  Bottom~Right
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.557          --
                  Bottom~Right
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.557          --
                  Bottom~Right
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> bbchar
! Isolated expression.
<to be read again> 
                   (
l.564    (
          "\")
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.564    (
          "\")
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

Reverse slash `\'
>> fatten.leftof.Bottom~Right
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.574            --
                    rightof Top~Left
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.574            --
                    rightof Top~Left
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.574            --
                    rightof Top~Left
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> bbchar
! Isolated expression.
<to be read again> 
                   (
l.581    (
          "]")
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.581    (
          "]")
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

Right square bracket `]'
>> fatten.leftof.Bottom~Right
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.591             --
                     leftof Top~Right;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.591             --
                     leftof Top~Right;
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.591             --
                     leftof Top~Right;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> Top~Left
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.596          --
                  Top~Right;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.596          --
                  Top~Right;
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.596          --
                  Top~Right;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> Bottom~Left
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.601          --
                  Bottom~Right
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.601          --
                  Bottom~Right
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.601          --
                  Bottom~Right
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> beginblacker1.25
! Isolated expression.
<to be read again> 
                   ;
l.607 beginblacker 1.25;
                        
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

>> bbchar
! Isolated expression.
<to be read again> 
                   (
l.609    (
          "^")
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.609    (
          "^")
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

Left angle bracket
>> fatcliptwice
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.618          (
                rightof Bottom~Left -- rightof Top~Left)
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.618          (
                rightof Bottom~Left -- rightof Top~Left)
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.618          (
                rightof Bottom~Left -- rightof Top~Left)
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> Bottom~Right
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.624          --
                  Horizon~Left
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.624          --
                  Horizon~Left
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.624          --
                  Horizon~Left
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> endblacker
! Isolated expression.
<to be read again> 
                   ;
l.628 endblacker;
                 
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

>> beginblacker1.25
! Isolated expression.
<to be read again> 
                   ;
l.632 beginblacker 1.25;
                        
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

>> bbchar
! Isolated expression.
<to be read again> 
                   (
l.634    (
          "_")
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.634    (
          "_")
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

Right angle bracket
>> fatcliptwice
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.643          (
                leftof Bottom~Right -- leftof Top~Right)
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.643          (
                leftof Bottom~Right -- leftof Top~Right)
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   (
l.643          (
                leftof Bottom~Right -- leftof Top~Right)
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> Bottom~Left
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.649          --
                  Horizon~Right
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.649          --
                  Horizon~Right
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.649          --
                  Horizon~Right
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> endblacker
! Isolated expression.
<to be read again> 
                   ;
l.653 endblacker;
                 
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

>> bbchar
! Isolated expression.
<to be read again> 
                   (
l.658    (
          "`")
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.658    (
          "`")
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> fatsymmetric
! Isolated expression.
<to be read again> 
                   ;
l.662    fatsymmetric;
                      
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

Reverse apostrophe ``'
>> splodgel.above.Bottom~Middle
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ..
l.669          ..
                  Top~Right
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ..
l.669          ..
                  Top~Right
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ..
l.669          ..
                  Top~Right
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> bbchar
! Isolated expression.
<to be read again> 
                   (
l.676    (
          "|")
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.676    (
          "|")
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

Vertical bar `|'
>> fatten.Bottom~Middle
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.686             --
                     Top~Middle
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.686             --
                     Top~Middle
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.686             --
                     Top~Middle
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

) (/usr/share/texmf/fonts/source/public/bbold/bbligs.mf
>> bbchar
! Isolated expression.
<to be read again> 
                   (
l.19    (
         oct "173")
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.19    (
         oct "173")
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

En dash `--'
>> dashMiddle~Left
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.28          --
                 dashMiddle~Right
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.28          --
                 dashMiddle~Right
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.28          --
                 dashMiddle~Right
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> bbchar
! Isolated expression.
<to be read again> 
                   (
l.35    (
         oct "175")
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.35    (
         oct "175")
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

Em dash `---'
>> dashMiddle~Left
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.44          --
                 dashMiddle~Right
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.44          --
                 dashMiddle~Right
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.44          --
                 dashMiddle~Right
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> bbchar
! Isolated expression.
<to be read again> 
                   (
l.51    (
         oct "176")
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.51    (
         oct "176")
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

Opening quotes ```'
>> splodgel.above.rightof.Bottom~Left
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ..
l.60          ..
                 farrightof Top~Left;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ..
l.60          ..
                 farrightof Top~Left;
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ..
l.60          ..
                 farrightof Top~Left;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> splodgel.above.leftof.Bottom~Right
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ..
l.65          ..
                 Top~Right
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ..
l.65          ..
                 Top~Right
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ..
l.65          ..
                 Top~Right
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> bbchar
! Isolated expression.
<to be read again> 
                   (
l.72    (
         oct "042")
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.72    (
         oct "042")
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

Closing quotes `'''
>> splodger.below.rightof.Top~Left
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ..
l.81          ..
                 Bottom~Left;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ..
l.81          ..
                 Bottom~Left;
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ..
l.81          ..
                 Bottom~Left;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> splodger.below.leftof.Top~Right
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ..
l.86          ..
                 farleftof Bottom~Right
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ..
l.86          ..
                 farleftof Bottom~Right
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
draw->...urrentpicture.doublepath(EXPR0)t_.withpen
                                                  .currentpen
<to be read again> 
                   ..
l.86          ..
                 farleftof Bottom~Right
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

)))
! Emergency stop.
<*> ...=ljfour; mag:=1; nonstopmode; input bbold11
                                                  
*** (job aborted, no legal end found)

Output written on bbold11.2602gf (36 characters, 6428 bytes).
